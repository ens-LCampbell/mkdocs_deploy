{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ensembl-genomio","text":"<p>A repository dedicated to pipelines used to turn basic genomic data into formatted  Ensembl core databases. Also allow users to dump core databases into various formats.</p> <p>File formats handled : FastA, gff3, JSON (following BRC4 specifications).</p> <p>Check out the :doc:<code>usage</code> section for further information of requirements to run ensembl-genomio pipelines.</p>"},{"location":"#ehive-pipelines","title":"Ehive pipelines","text":"<ol> <li>Genome loader: Creates an Ensembl core database from a set of flat files.</li> <li>Genome dumper: Dumps flat files from an Ensembl core database.</li> </ol>"},{"location":"#contents","title":"Contents","text":"<p>Check out ref:<code>installation &lt;install&gt;</code> section for further information on how  to install the project.</p> <ol> <li>Usage</li> <li>Install</li> <li>License</li> </ol>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>ensembl/\n\u251c\u2500\u2500 brc4\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 runnable\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 compare_fasta.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 compare_report.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 core_server.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 download_genbank.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 dump_stable_ids.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 extract_from_gb.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 fill_metadata.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 gff3_specifier.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 integrity.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 json_schema_factory.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 load_sequence_data.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 manifest.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 manifest_stats.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 prepare_genome.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 read_json.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 say_accession.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 seqregion_parser.py\n\u2514\u2500\u2500 io\n    \u2514\u2500\u2500 genomio\n        \u251c\u2500\u2500 assembly\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 get_assembly_data.py\n        \u251c\u2500\u2500 db_factory.py\n        \u251c\u2500\u2500 events\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 format_events.py\n        \u251c\u2500\u2500 events_dumper.py\n        \u251c\u2500\u2500 events_loader.py\n        \u251c\u2500\u2500 fastaprep\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 process_fasta.py\n        \u251c\u2500\u2500 genbank\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 extract_from_genbank.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 get_genbank.py\n        \u251c\u2500\u2500 genome_metadata\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 compare_genome_stats.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 dump_genome_metadata.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 dump_genome_stats.py\n        \u251c\u2500\u2500 gff3\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 functional_annotation.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 process_gff3.py\n        \u251c\u2500\u2500 integrity.py\n        \u251c\u2500\u2500 manifest_maker.py\n        \u251c\u2500\u2500 manifest_stats.py\n        \u251c\u2500\u2500 metadata\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 prepare_genome.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 prepare_seq_region.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 update_genome_metadata.py\n        \u251c\u2500\u2500 schemas\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 json_schema_factory.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 json_schema_validator.py\n        \u251c\u2500\u2500 seq_region_dumper.py\n        \u2514\u2500\u2500 utils\n            \u251c\u2500\u2500 archive_utils.py\n            \u2514\u2500\u2500 json_utils.py\n</code></pre>"},{"location":"#project-module-overview","title":"Project Module Overview","text":""},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.</p>"},{"location":"#indices-and-tables","title":"Indices and tables","text":"<p>"},{"location":"#mkdocs","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"install/","title":"API Setup and installation","text":""},{"location":"install/#requirements","title":"Requirements","text":"<p>An Ensembl API checkout including:</p> <ul> <li>ensembl-genomio  (export /src/perl and /src/python into PERL5LIB and PYTHONPATH respectively)</li> <li>ensembl-hive</li> <li>ensembl-production</li> <li>ensembl-analysis (on dev/hive_master branch)</li> <li>ensembl-taxonomy</li> <li>ensembl-orm</li> </ul>"},{"location":"install/#software","title":"Software","text":"<ul> <li>Python 3.8+</li> <li>Bioperl 1.6.9+</li> </ul>"},{"location":"install/#python-modules","title":"Python Modules","text":"<ul> <li>bcbio-gff</li> <li>biopython</li> <li>jsonschema</li> <li>mysql-connector-python</li> <li>requests</li> <li>python-redmine</li> </ul>"},{"location":"install/#installation","title":"Installation","text":""},{"location":"install/#directly-from-github","title":"Directly from GitHub:","text":"<pre><code>git clone https://github.com/Ensembl/ensembl-genomio\ngit clone https://github.com/Ensembl/ensembl-analysis -b dev/hive_master\ngit clone https://github.com/Ensembl/ensembl-production\ngit clone https://github.com/Ensembl/ensembl-hive\ngit clone https://github.com/Ensembl/ensembl-taxonomy\ngit clone https://github.com/Ensembl/ensembl-orm\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>Apache License    Version 2.0, January 2004    http://www.apache.org/licenses/</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"nextflow/","title":"Nextflow related documentation","text":""},{"location":"nextflow/#installation","title":"Installation","text":"<p>If you don't have an installed environment or you don't have nextflow itself, here's one of the ways to install it.</p> <p>Define <code>NXF_HOME</code> env variable to use a nextlow home location instead of the default one (<code>$HOME/.nextflow</code>). Everything else is unchanged from the default Nextflow installation instructions on https://www.nextflow.io/index.html#GetStarted.</p> <pre><code># add NXF_HOME env\nexport NXF_HOME=$(pwd)/dot.nextflow # or whatever\n\n# get nextflow and install almost like here: https://www.nextflow.io/index.html#GetStarted\nwget -O - https://get.nextflow.io  &gt; nextflow.install.bash\n\n# review and run\ncat nextflow.install.bash | bash -i 2&gt;&amp;1 | tee nextflow.install.log\n\n# run test, see https://www.nextflow.io/index.html#GetStarted\n./nextflow run hello\n</code></pre> <p>Configure the environment you're using if you haven't done so yet. Don't forget to add <code>NXF_HOME</code>, patch <code>PATH</code> and export them.</p> <pre><code># fix env variables, i.e.:\nexport NXF_HOME=$(pwd)/dot.nextflow\nexport PATH=$(pwd):$PATH\n</code></pre> <p>If you wish, you can set <code>NXF_WORK</code> env to be used by <code>nextflow</code>.</p> <pre><code>export NXF_WORK=...\n</code></pre> <p>Or use <code>nextflow -e.NXF_WORK=...</code> approach. Ideally, should be overridable by the <code>-work-dir</code> (<code>-w</code>) option of <code>nextflow run</code></p>"},{"location":"nextflow/#running-a-pipeline","title":"Running a pipeline","text":"<p>Once you have production (and nextflow) env ready, you can run pipelines. I.e.</p> <pre><code>CMD=&lt;dba_alias&gt;\n\nmkdir -p data\npushd data\n  data_dir=$(pwd)\n  nextflow run \\\n    -w ${data_dir}/nextflow_work \\\n    ${ENSEMBL_ROOT_DIR}/ensembl-genomio/pipelines/nextflow/workflows/dumper_pipeline/main.nf \\\n    -profile lsf \\\n    $(${CMD} details script) \\\n    --dbname_re '^drosophila_melanogaster_\\w+_57_.*$' \\\n    --output_dir ${data_dir}/dumper_output\npopd\n</code></pre> <p>Try to invoke pipelines with <code>--help</code> option to get insight on how to run them.</p>"},{"location":"nextflow/#strange-things-we-met","title":"Strange things we met","text":""},{"location":"nextflow/#channel-is-not-forked-only-one-operation-on-stream-is-allowed","title":"Channel is not forked, only one operation on stream is allowed","text":""},{"location":"nextflow/#symptoms","title":"Symptoms:","text":"<p>When running a stage or a subworkflow on a channel with a single element we expect stream to be forked, allowing us to seed several task at a time.</p> <pre><code>// create that channel with a single element\n//   calls read_json(...) in turn, see below\ndbs = from_read_json(...)\n\nDUMP_SQL(..., dbs, ...)\nDUMP_METADATA(..., dbs, ...)\n</code></pre> <p>Instead pipeline dies with</p> <pre><code>Caused by: Cannot load from object array because \"this.keys\" is null\n</code></pre> <p>and when printing this object (<code>dbs</code> in this case, with <code>println \"db: ${db}\"</code>), we see it dict surronded by the curly brackets like this</p> <pre><code>{..., \"db_name\":\"some_db_name\", ...}\n</code></pre> <p>instead of this (with square brackets)</p> <pre><code>[..., \"db_name\":\"some_db_name\", ...]\n</code></pre>"},{"location":"nextflow/#reason-solution","title":"Reason / solution","text":"<p>In our case we used the <code>read_json</code> function similar to this one:</p> <pre><code>def read_json(json_path) {\n    slurp = new JsonSlurper()\n    json_file = file(json_path)\n    text = json_file.text\n    return slurp.parseText(text) // &lt;-- problem here\n}\n</code></pre> <p>that returned some kind of a lazy evaluator/iterator/whatever(not sure).</p> <p>Replacing <code>return slurp.parseText(text)</code> with</p> <pre><code>    not_a_lazy_val = slurp.parseText(text)\n    return not_a_lazy_val\n</code></pre> <p>did help.</p>"},{"location":"pipelines/","title":"Ensembl Genomio Pipelines:","text":""},{"location":"pipelines/#genomio-prepare-pipeline","title":"Genomio prepare pipeline","text":"<p>Module [Bio::EnsEMBL::Pipeline::PipeConfig::BRC4_genome_prepare_conf]</p> <p>Genome prepare pipeline for BRC/Metazoa</p>"},{"location":"pipelines/#description","title":"Description","text":"<p>Retrieve data for a genome from INSDC and prepare the following files in a separate folder for each genome:</p> <ul> <li>FASTA for DNA sequences</li> <li>FASTA for protein sequences</li> <li>GFF gene models</li> <li>JSON functional annotation</li> <li>JSON seq_region</li> <li>JSON genome</li> <li>JSON manifest</li> </ul> <p>The JSON files follow the schemas defined in the /schemas folder.</p> <p>These files can then be fed to the Genome loader pipeline.</p>"},{"location":"pipelines/#how-to-run","title":"How to run","text":"<pre><code>init_pipeline.pl Bio::EnsEMBL::Pipeline::PipeConfig::BRC4_genome_prepare_conf \\\n    --host $HOST --port $PORT --user $USER --pass $PASS \\\n    --hive_force_init 1 \\\n    --pipeline_dir temp/prepare \\\n    --data_dir $INPUT \\\n    --output_dir $OUTPUT \\\n    ${OTHER_OPTIONS}\n</code></pre>"},{"location":"pipelines/#parameters","title":"Parameters","text":"option default value meaning <code>--pipeline_name</code> brc4_genome_prepare name of the hive pipeline <code>--pipeline_dir</code> temp directory for this pipeline run <code>--data_dir</code> directory with json files for each genome to prepare, following the format set by schemas/genome_schema.json <code>--output_dir</code> directory where the prepared files are to be stored <code>--merge_split_genes</code> 0 Sometimes the gene features are split in a gff file. Ensembl expects genes to be contiguous, so this option merge the parts into 1. <code>--exclude_seq_regions</code> Do not include those seq_regions (apply to all genomes, this should be seldom used) <code>--validate_gene_id</code> 0 Enforce a strong gene ID pattern (replace by GeneID if available) <code>--ensembl_mode</code> 0 By default, set additional metadata for BRC genomes. With this parameter, use vanilla Ensembl metadata."},{"location":"usage/","title":"Usage","text":"<p>For full details on python modules and Ensembl API repositories required see install section.</p>"},{"location":"usage/#environment-setup","title":"Environment setup","text":"<pre><code>python3.7 -m venv path/to/virtual_env\n. path/to/virtual_env/bin/activate\npip install -e .\n</code></pre> <p>Do not forget to load this environment by sourcing virtual_env/bin/activate in order to run ensembl-genomio pipeline(s).</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>src<ul> <li>ensembl<ul> <li>[brc4]<ul> <li>[runnable]<ul> <li>compare_fasta</li> <li>compare_report</li> <li>core_server</li> <li>download_genbank</li> <li>dump_stable_ids</li> <li>extract_from_gb</li> <li>fill_metadata</li> <li>gff3_specifier</li> <li>integrity</li> <li>json_schema_factory</li> <li>load_sequence_data</li> <li>manifest</li> <li>manifest_stats</li> <li>prepare_genome</li> <li>read_json</li> <li>say_accession</li> <li>seqregion_parser</li> </ul> </li> </ul> </li> <li>[io]<ul> <li>[genomio]<ul> <li>assembly<ul> <li>get_assembly_data</li> </ul> </li> <li>db_factory</li> <li>events<ul> <li>format_events</li> </ul> </li> <li>events_dumper</li> <li>events_loader</li> <li>fastaprep<ul> <li>process_fasta</li> </ul> </li> <li>genbank<ul> <li>extract_from_genbank</li> <li>get_genbank</li> </ul> </li> <li>genome_metadata<ul> <li>compare_genome_stats</li> <li>dump_genome_metadata</li> <li>dump_genome_stats</li> </ul> </li> <li>gff3<ul> <li>functional_annotation</li> <li>process_gff3</li> </ul> </li> <li>integrity</li> <li>manifest_maker</li> <li>manifest_stats</li> <li>metadata<ul> <li>prepare_genome</li> <li>prepare_seq_region</li> <li>update_genome_metadata</li> </ul> </li> <li>schemas<ul> <li>json_schema_factory</li> <li>json_schema_validator</li> </ul> </li> <li>seq_region_dumper</li> <li>utils<ul> <li>archive_utils</li> <li>json_utils</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>[example]<ul> <li>calculations</li> <li>google_docs</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/ensembl/","title":"Index","text":""},{"location":"reference/ensembl/brc4/","title":"Index","text":""},{"location":"reference/ensembl/brc4/runnable/","title":"Index","text":""},{"location":"reference/ensembl/brc4/runnable/compare_fasta/","title":"compare_fasta","text":""},{"location":"reference/ensembl/brc4/runnable/compare_fasta/#src.ensembl.brc4.runnable.compare_fasta.compare_fasta","title":"<code>compare_fasta</code>","text":"<p>             Bases: <code>BaseRunnable</code></p>"},{"location":"reference/ensembl/brc4/runnable/compare_fasta/#src.ensembl.brc4.runnable.compare_fasta.compare_fasta.build_seq_dict","title":"<code>build_seq_dict(seqs)</code>","text":"<p>Build a seq dict taking duplicates into account</p>"},{"location":"reference/ensembl/brc4/runnable/compare_report/","title":"compare_report","text":""},{"location":"reference/ensembl/brc4/runnable/core_server/","title":"core_server","text":""},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer","title":"<code>CoreServer</code>","text":"<p>Basic interface to a MySQL server with core databases.</p> <p>Allows to get a list of databases and provides access to them.</p> <p>To connect to a specific database: 1) Create the core server object 2) Set the database with core_server.set_database(\"dbname\") 3) Retrieve a cursor with core_server.get_cursor()</p>"},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer.connect","title":"<code>connect()</code>","text":"<p>Create a connection to the database.</p>"},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer.get_all_cores","title":"<code>get_all_cores()</code>","text":"<p>Query the server and retrieve all databases that look like Ensembl cores.</p>"},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer.get_cores","title":"<code>get_cores(prefix='', build='', version='', dbname_re='')</code>","text":"<p>Provide a list of core databases, filtered if requested. Args:     prefix: filter by prefix (no _ is added automatically)     build: filter by build     version: filter by Ensembl version     dbname_re: filter by dbname regular expression</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of database names</p>"},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer.get_db_metadata","title":"<code>get_db_metadata()</code>","text":"<p>Retrieve all metadata from a database.</p> <p>Returns:</p> Type Description <code>Dict[str, List]</code> <p>A dict of with key meta_key, and value=List of meta_value.</p>"},{"location":"reference/ensembl/brc4/runnable/core_server/#src.ensembl.brc4.runnable.core_server.CoreServer.get_table_data","title":"<code>get_table_data(table, fields, constraints='')</code>","text":"<p>Retrieve all rows from a table.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A List containing a dict for each row.</p>"},{"location":"reference/ensembl/brc4/runnable/download_genbank/","title":"download_genbank","text":""},{"location":"reference/ensembl/brc4/runnable/download_genbank/#src.ensembl.brc4.runnable.download_genbank.DownloadError","title":"<code>DownloadError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>In case a download failed.</p>"},{"location":"reference/ensembl/brc4/runnable/download_genbank/#src.ensembl.brc4.runnable.download_genbank.download_genbank","title":"<code>download_genbank</code>","text":"<p>             Bases: <code>BaseRunnable</code></p>"},{"location":"reference/ensembl/brc4/runnable/download_genbank/#src.ensembl.brc4.runnable.download_genbank.download_genbank.download_genbank","title":"<code>download_genbank(accession, dl_dir)</code>  <code>staticmethod</code>","text":"<p>Given a GenBank accession, download the corresponding file in GenBank format</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/","title":"dump_stable_ids","text":""},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs","title":"<code>DumpStableIDs</code>","text":"<p>An processor that create events from pairs of ids and can print those events out.</p> <p>Attributes:</p> Name Type Description <code>server</code> <p>a core server set to a database, to retrieve the data from.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.extend_event","title":"<code>extend_event(event, from_list, to_list)</code>","text":"<p>Given an event, aggregate ids in the 'from' and 'to' sets, to connect the whole group.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>StableIdEvent</code> <p>the event to extend.</p> required <code>from_list</code> <code>Dict[str, List[str]]</code> <p>A dict a the from ids, and their corresponding to ids.</p> required <code>to_list</code> <code>Dict[str, List[str]]</code> <p>A dict of the to ids, and their corresponding from ids.</p> required <p>Returns:</p> Type Description <code>StableIdEvent</code> <p>A tuple of the extended event, and the from_list and to_list from which the ids that</p> <code>List</code> <p>have been added to the event have been removed.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.get_history","title":"<code>get_history()</code>","text":"<p>Retrieve all events from a database.</p> <p>Returns:</p> Type Description <code>List</code> <p>A list of all events.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.get_mapping_sessions","title":"<code>get_mapping_sessions()</code>","text":"<p>Retrieve the mapping sessions from the connected database.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of sessions, as dicts: {'id: str, 'release': str, 'date': str}.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.get_pairs","title":"<code>get_pairs(session_id)</code>","text":"<p>Retrieve all pair of ids for a given session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>int</code> <p>id of a session from the connected database.</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of all pairs of ids, as dicts: {'old_id': str, 'new_id': str}.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.make_events","title":"<code>make_events(pairs)</code>","text":"<p>Given a list of pairs, create events.</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>List</code> <p>list of dicts {'old_id': str, 'new_id': str}.</p> required Return <p>A list of events.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.DumpStableIDs.print_events","title":"<code>print_events(events, output_file)</code>","text":"<p>Print events in a format for BRC.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[StableIdEvent]</code> <p>list of events for a given genome.</p> required <code>output_file</code> <code>Path</code> <p>where the events will be printed.</p> required"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent","title":"<code>StableIdEvent</code>","text":"<p>Represents a stable id event from one gene set version to another one. Various events: - new genes - deleted genes - merged genes (several genes to one) - split genes (one gene to several) - mixed (several genes to several)</p> <p>Attributes:</p> Name Type Description <code>from_list</code> <p>List of genes the previous gene set.</p> <code>to_list</code> <p>List of genes in the new gene set.</p> <code>release</code> <p>New gene set release name.</p> <code>date</code> <p>Date of the new gene set.</p> <code>name</code> <p>Name of the event (will be updated automatically).</p> <code>pairs</code> <p>All pair of ids for this event.</p> <p>Any gene set before 2019-09 is dubbed pre-BRC4.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.add_from","title":"<code>add_from(from_id)</code>","text":"<p>Store an id in the from_set.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.add_pair","title":"<code>add_pair(pair)</code>","text":"<p>Keeps a record of this pair.</p> <p>Parameters:</p> Name Type Description Default <code>pair</code> <code>Dict</code> <p>Dictionary of pairs to record, with keys \"old_id\" and \"new_id\".</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>When no-empty value is provided for either \"old_id\" or \"new_id\".</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.add_pairs","title":"<code>add_pairs(pairs)</code>","text":"<p>Provided all the pairs, keep those that are used by this event.</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>List[Dict[str, str]]</code> <p>list of pairs of ids {old_id:\"\", new_id:\"\"}.</p> required"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.add_to","title":"<code>add_to(to_id)</code>","text":"<p>Store an id in the from_set.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.brc_format_1","title":"<code>brc_format_1()</code>","text":"<p>Returns a list events, one line per initial ID, in the following TSV format: - old gene id - event name - release - release date - list of old gene ids in the event (comma-separated) - list of new gene ids in the event (comma-separated)</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.brc_format_2","title":"<code>brc_format_2()</code>","text":"<p>Returns a list of combination of genes, one line per combination of old_id - new_ids, in the following TSV format: - old gene id - new gene id - event name - release - release date</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.clean_pairs","title":"<code>clean_pairs()</code>","text":"<p>Remove the empty old pairs when the event is not 'new'.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.clean_set","title":"<code>clean_set(this_list)</code>  <code>staticmethod</code>","text":"<p>Removes any empty elements from a list.</p> <p>Parameters:</p> Name Type Description Default <code>this_list</code> <code>Set</code> <p>list of items, so of which can be empty/None.</p> required <p>Returns:</p> Type Description <code>Set</code> <p>The cleaned list.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.get_full_release","title":"<code>get_full_release()</code>","text":"<p>Returns the expanded release name, pre-BRC4 or <code>BRC4 = build</code>.</p>"},{"location":"reference/ensembl/brc4/runnable/dump_stable_ids/#src.ensembl.brc4.runnable.dump_stable_ids.StableIdEvent.get_name","title":"<code>get_name()</code>","text":"<p>Retrieve the name for this event, update it beforehand.</p>"},{"location":"reference/ensembl/brc4/runnable/extract_from_gb/","title":"extract_from_gb","text":""},{"location":"reference/ensembl/brc4/runnable/extract_from_gb/#src.ensembl.brc4.runnable.extract_from_gb.FormattedFilesGenerator","title":"<code>FormattedFilesGenerator</code>","text":"<p>Contains a parser to load data from a file, and output a set of files that follow our schema for input into a core database</p>"},{"location":"reference/ensembl/brc4/runnable/extract_from_gb/#src.ensembl.brc4.runnable.extract_from_gb.FormattedFilesGenerator.parse_genbank","title":"<code>parse_genbank(gb_file)</code>","text":"<p>Load a sequence from a Genbank file</p>"},{"location":"reference/ensembl/brc4/runnable/extract_from_gb/#src.ensembl.brc4.runnable.extract_from_gb.FormattedFilesGenerator.set_prefix","title":"<code>set_prefix(prefix)</code>","text":"<p>Define a prefix to add to the feature IDs</p>"},{"location":"reference/ensembl/brc4/runnable/extract_from_gb/#src.ensembl.brc4.runnable.extract_from_gb.FormattedFilesGenerator.set_production_name","title":"<code>set_production_name(prod_name)</code>","text":"<p>Define a production_name for the genome</p>"},{"location":"reference/ensembl/brc4/runnable/fill_metadata/","title":"fill_metadata","text":""},{"location":"reference/ensembl/brc4/runnable/gff3_specifier/","title":"gff3_specifier","text":""},{"location":"reference/ensembl/brc4/runnable/integrity/","title":"integrity","text":""},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity","title":"<code>integrity</code>","text":"<p>             Bases: <code>BaseRunnable</code></p> <p>Check the integrity of sequence and annotation files in the genome</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.check_ids","title":"<code>check_ids(list1, list2, name)</code>","text":"<p>Compare the ids in list1 and list2.</p> <p>Parameters:</p> Name Type Description Default <code>list1</code> <p>dict containing sequence ids retrieved from functional.json.</p> required <code>list2</code> <p>dict containing length and id in the retrieved from the gff.</p> required <code>name</code> <p>string</p> required Return <p>Error if the ids in functional.json and gff do not match.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.check_lengths","title":"<code>check_lengths(list1, list2, name, allowed_len_diff=None, special_diff=False)</code>","text":"<p>Check the difference in ids and length between list1 and list2.     There are a few special cases here where we allow a certain asymmetry     by changing the values of the arguments.</p> <p>Parameters:</p> Name Type Description Default <code>list1</code> <p>dict containing length and id of the sequence from fasta files.</p> required <code>list2</code> <p>dict containing length and id in the retrieved from the gff.</p> required <code>name</code> <p>string</p> required set as None when we do not want to accept any difference in length between list1 and list2. <p>The value here can be changed based on how much difference in sequence length we are wanting to accept.</p> set as False when no special length difference is expected between the lists. <p>This can be changed if we want to report common sequences with 1 BP difference.</p> <p>Returns:</p> Type Description <p>Error if there is a difference in length or ids between the lists.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.check_md5sum","title":"<code>check_md5sum(path, md5sum)</code>","text":"<p>Verify the integrity of the files in manifest.json.</p> <pre><code>An MD5 hash is generated using the path provided which is then compared to the hash\nin manifest.json.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The path for each file in the genome.</p> required <code>md5sum</code> <p>MD5 hash for the files.</p> required <p>Returns:</p> Type Description <p>Error if the md5sum does not match.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.check_seq_region_lengths","title":"<code>check_seq_region_lengths(seqrs, feats, name, circular=None)</code>","text":"<p>Check the integrity of seq_region.json file by comparing the length of the sequence     to fasta files and the gff.</p> <pre><code>Seq_region file is in json format containing the metadata of the sequence.\nIt contains sequence id, length, location and the synonyms for the sequence name from different sources.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <p>Sequence name and length retrieved from seq_region.json file.</p> required <code>feats</code> <p>Sequence name and length retrieved from the fasta and gff file.</p> required <code>name</code> <p>String</p> required <p>Returns:</p> Type Description <p>Error if there are common sequences with difference in ids</p> <p>and if the sequences are not consistent in the files.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.get_agp_seq_regions","title":"<code>get_agp_seq_regions(agp_dict)</code>","text":"<p>AGP files describe the assembly of larger sequence objects using smaller objects.     Eg: describes the assembly of scaffolds from contigs.</p> <p>Parameters:</p> Name Type Description Default <code>agp_dict</code> <p>dict containing the information about the sequence.</p> required Note <p>AGP file is only used in the older builds, not used for current processing.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.get_fasta_lengths","title":"<code>get_fasta_lengths(fasta_path, ignore_final_stops=False)</code>","text":"<p>Check if the fasta files have the correct ids and no stop codon.</p> <p>Parameters:</p> Name Type Description Default <code>fasta_path</code> <p>Path to fasta_dna and fasta_pep files.</p> required <p>Returns:</p> Type Description <p>Error if any empty ids, non-unique ids or stop codons are found in the fasta files.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.get_functional_annotation","title":"<code>get_functional_annotation(json_path)</code>","text":"<p>Load the functional annotation file to retrieve the gene_id and translation id.     A functional annotation file contains information about a gene.     The functional annotation file is stored in a json format containing     the description, id and object type (eg: \"gene\", \"transcript\", \"translation\").</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <p>Path to functional_annotation.json.</p> required <p>Returns:</p> Type Description <p>dict with gene and translation ids.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.parse_gff3","title":"<code>parse_gff3(gff3_handle)</code>","text":"<p>A GFF parser is used to retrieve information in the GFF file such as    gene and CDS ids and their corresponding lengths.</p> <p>Parameters:</p> Name Type Description Default <code>gff3_handle</code> <p>Path to gff3 file.</p> required <p>Returns:</p> Type Description <p>dict containing sequence ids, gene ids, transcript ids and translation ids</p> <p>are stored with their corresponding lengths.</p>"},{"location":"reference/ensembl/brc4/runnable/integrity/#src.ensembl.brc4.runnable.integrity.integrity.run","title":"<code>run()</code>","text":"<p>Load files listed in the manifest.json and check the integrity.     Check if the files are correct by verifying the MD5 hash.     Check if translation, functional annotation and sequence region ids     and lengths are consistent with the information in gff.     Compare sequence length from fasta_dna file to seq_region.json metadata.</p> <p>Parameters:</p> Name Type Description Default <code>manifest</code> <p>Path to the manifest file.</p> required <p>Returns:</p> Type Description <p>Error if any of the above checks fail.</p>"},{"location":"reference/ensembl/brc4/runnable/json_schema_factory/","title":"json_schema_factory","text":""},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/","title":"load_sequence_data","text":""},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data","title":"<code>load_sequence_data</code>","text":"<p>             Bases: <code>BaseRunnable</code></p> <p>loading sequence data, seq region names, atrributes and synonyms</p> <p>eHive module to load sequnce data, seq region names, atrributes and synonyms from FASTAs AGPs and seq_region.json. Various ensembl-analysis perl scripts are used to create coord_systems, load sequences and set attributes. SQL commands through out the code to be replaces with the proper python API at some point.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_asm_mappings","title":"<code>add_asm_mappings(cs_pairs, log_pfx)</code>","text":"<p>Adds \"assembly.mapping\" strings to meta table.</p> <p>Nullifies asm_mappings contig versions as well, but don't nullify toplevel Doesn't add mapping id there is a single CS SQL code.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_contig_ena_attrib","title":"<code>add_contig_ena_attrib(log_pfx, cs_name='contig')</code>","text":"<p>Add ENA attrib for contigs if their names are ENA accessions</p> <p>Nno sequence_level checks are used -- just cs name. See ensembl-datacheck/lib/Bio/EnsEMBL/DataCheck/Checks/SeqRegionNamesINSDC.pm . SQL code.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_karyotype_bands","title":"<code>add_karyotype_bands(seq_region_file, seq_region_map, attrib_type_map, work_dir, unversion=False, karyotype_bands_property='karyotype_bands')</code>","text":"<p>Add karyotypic data from the seq_region metafile.</p> <p>Add karyotypic data from the schemas/seq_region_schema.json compatible meta data file. Returns list of [ (seq_region_name, seq_region_id, unversioned_name) ] trios for seq_regions having karyotype bands info.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_karyotype_data","title":"<code>add_karyotype_data(seq_region_file, seq_region_map, attrib_type_map, work_dir, unversion=False)</code>","text":"<p>Adds various karyotypic data from seq_region file and assembly metadata (if present).</p> <p>Adds various karyotypic data from the schemas/seq_region_schema.json compatible meta data file and assembly metadata (if present).</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_karyotype_rank_based_on_assembly_metadata","title":"<code>add_karyotype_rank_based_on_assembly_metadata(seq_region_map, attrib_type_map, work_dir, unversion=True)</code>","text":"<p>Add <code>karyotype_rank</code> attributes for seq region data from based on metadata from the \"genome_data\" module parameter. Add only to the seq_regions with ids listed in the array corresponding to 'genome_data/assembly/chromosome_display_order'.</p> <p>Set \"coord_system_tag\" attribute to the one listed in the \"cs_tag_for_ordered\" module param; or \"chromosome\" if param value is underfined. Force updating of the \"coord_system_tags\" if <code>force_update_coord_system_tag</code> module param is True.</p> <p>Returns list of [ (seq_region_name, seq_region_id, unversioned_name) ] trios for seq_regions with updated karyotype_ranks.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_karyotype_rank_for_chromosomes","title":"<code>add_karyotype_rank_for_chromosomes(attrib_type_map, work_dir, chromosome_coord_system_name='chromosome')</code>","text":"<p>Add <code>karyotype_rank</code> attributes for seq region data from the \"chromosome\" coordinate system.</p> <p>Returns list of [ (seq_region_name, seq_region_id, unversioned_name) ] trios for seq_regions with updated karyotype_ranks. Not altering \"coord_system_tag\" tag attributes.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_karyotype_rank_from_bands_info","title":"<code>add_karyotype_rank_from_bands_info(regions_with_karyotype_bands, other_regions_with_ranks, attrib_type_map, work_dir)</code>","text":"<p>Add karyotype_ranks for <code>regions_with_karyotype_bands</code> (those with karyotype bands in seq_region metadata) but not present in <code>other_regions_with_ranks</code> list.</p> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_sr_attribs","title":"<code>add_sr_attribs(seq_region_file, seq_region_map, attrib_type_map, work_dir, unversion=False)</code>","text":"<p>Add seq_region_attrib(s) from the seq_region_file meta data file.</p> <p>Explicit list is taken from \"sr_attrib_types\" module param.</p> <p>Add seq_region_attrib(s) from the schemas/seq_region_schema.json compatible meta data file. Explicit list is taken from \"sr_attrib_types\" module param.</p> <p>\"sr_attrib_types\" defines { json_property -&gt; attrib_type.name } map. If the value is dict, its keys are treated as \"/\"-delimetered \"json_path\" (i.e. \"added_sequence/assembly_provider/name\"). No arrays can be processed. Only simple or \"flattable\" types.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_sr_ebi_brc4_names","title":"<code>add_sr_ebi_brc4_names(seq_region_file, seq_region_map, attrib_type_map, work_dir, unversion=False)</code>","text":"<p>Add \"(EBI|BRC4)_seq_region_name\" seq_region_attrib(s) either from the seq_region_file meta data file, or from original seq_region names.</p> <p>Add \"(EBI|BRC4)_seq_region_name\" seq_region_synonym from the schemas/seq_region_schema.json compatible meta data file or from the original seq_region_names. A special case of attributes adding with default values derived from seq_region names.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.add_sr_synonyms","title":"<code>add_sr_synonyms(seq_region_file, seq_region_map, external_db_map, work_dir, unversion=False, unversionable_sources_set=frozenset(['INSDC', 'RefSeq']))</code>","text":"<p>Add seq_region_synonym from the seq_region_file meta data file.</p> <p>Add seq_region_synonym from the schemas/seq_region_schema.json compatible meta data file. Merge with the already exinsting ones in the db.</p> If unversion is true <ul> <li>the unversioned synonym would be used to get the seq_region_id from \"seq_region_map\" if possible</li> <li>the unversioned synonyms from the unversionable_sources_set will be added as well as the original ones</li> </ul> <p>Too close to the DB schema.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.agp_prune","title":"<code>agp_prune(from_file, to_file, used=None)</code>","text":"<p>Remove already components from the AGP file if they are seen in \"used\" set</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.chunk_contigs","title":"<code>chunk_contigs(fasta, cs_ranks, agps, work_dir, chunk_size=0, chunks_cs_name='ensembl_internal')</code>","text":"<p>chunk dna sequence fasta   no chunking if chunk_size &lt; 50k</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.copy_sr_name_to_syn","title":"<code>copy_sr_name_to_syn(cs, x_db, log_pfx)</code>","text":"<p>Store original seq_region names as seq_region_synonym</p> <p>Store original seq_region names (from a given cood_systen, \"cs\" param) as seq_region_synonyms (using \"x_db\" external source name) SQL code.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.flattern_seq_region_item","title":"<code>flattern_seq_region_item(seq_region, prop_name, path_attrib_id_map, sep='/')</code>","text":"<p>Flattern seq_region[property] and store corresponding [ (json_path, attrib_id, value)... ] (as list of trios).</p> <p>Only works for simple properties or dicts with no arrays on the path. Basically, implemets tree traversal. Utility function used by the <code>add_sr_attribs</code> method</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.get_external_db_mapping","title":"<code>get_external_db_mapping()</code>","text":"<p>Get a map from a file for external_dbs to Ensembl dbnames from \"external_db_map\" module(!) param</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.get_toplevel_from_cs","title":"<code>get_toplevel_from_cs(coord_system_name, work_dir)</code>","text":"<p>Returns list of [ (seq_region_name, seq_region_id, \"\") ] trios for toplevel seq_regions from coord system with <code>coord_system_name</code>   or having  \"coord_system_tag\" attribute with the <code>coord_system_name</code> value</p> <p>SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.initial_sequence_loading","title":"<code>initial_sequence_loading(work_dir)</code>","text":"<p>initial preparation and loading of AGPs and fasta data.</p> <p>initial preparation and loading of AGPs and fasta data using ensembl-analysis perl scripts</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.insert_to_db","title":"<code>insert_to_db(list_of_tuples, table_name, col_names, work_dir, ignore=True)</code>","text":"<p>Insert into the core db's {table_name} tuples from {list_of_tuples} as col_names.</p> <p>Use <code>quote_or_null</code> (see definition below) method for string values, when putting values into <code>list_of_tuples</code> SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_agp","title":"<code>load_agp(pair, asm_v, src_file, log_pfx)</code>","text":"<p>ensembl script (load_agp.pl) based utility for loading seq_regions assembly data (AGPs)</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_cs_data","title":"<code>load_cs_data(cs, rank, pair, asm_v, src_file, log_pfx, loaded_regions=None, seq_level=False)</code>","text":"<p>creates a coord_system and loads sequence or assembly(AGP) data for corresponding seqregions</p> <p>doesn't load already seen sequences</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_map_from_core_db","title":"<code>load_map_from_core_db(table, cols, work_dir)</code>","text":"<p>Load 2 \"cols\" from core db \"table\" as map</p> <p>Load { cols[0] : cols[1] } map from the core db \"table\" SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_map_from_sql_stdout","title":"<code>load_map_from_sql_stdout(in_file, skip_header=False)</code>","text":"<p>Load map from the SQL output</p> <p>Process input in_file with \"key  value\" pairs and load then into the {key : value} map. Skips header if skip_header.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_seq_data","title":"<code>load_seq_data(fasta, agps, cs_rank, log_pfx)</code>","text":"<p>loads sequence data for various coordinate systems accordingly with their rank</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_seq_region","title":"<code>load_seq_region(cs, rank, asm_v, src_file, log_pfx, seq_level=False, additional_load=False)</code>","text":"<p>ensembl-analysis script (load_seq_region.pl) based utility for loading seq_regions FASTA sequences</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.load_seq_region_synonyms_trios_from_core_db","title":"<code>load_seq_region_synonyms_trios_from_core_db(work_dir)</code>","text":"<p>Load seq_region_synonyms from from core db into [(seq_region_id, name, synonym)...] list</p> <p>SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.name_and_id_from_seq_region_item","title":"<code>name_and_id_from_seq_region_item(seq_region_item, seq_region_map, try_unversion=False, throw_missing=True)</code>","text":"<p>Get (seq_region_name, seq_region_id, unversioned_name) from seq_region_item struct(dict)</p> <p>Gets unversioned_name only if \"try_unversion\" is True. Throws exception if not able to get seq_region_id from \"seq_region_map\" and \"throw_missing\" is true.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.nullify_ctg_cs_version","title":"<code>nullify_ctg_cs_version(cs_order, log_pfx)</code>","text":"<p>Nullify every CS version with rank larger than that of \"contig\", but don't nullify toplevel ones.</p> <p>SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.param_defaults","title":"<code>param_defaults()</code>","text":"<p>default parameter/options values</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.pjc","title":"<code>pjc(*parts)</code>","text":"<p>Join path parts and try to create every directory but the last one.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.quote_or_null","title":"<code>quote_or_null(val, quotes=\"'\", null='NULL', strings_only=True)</code>","text":"<p>Return <code>val</code> wrapped in <code>quotes</code> or <code>null</code> value</p> <p>Quotes only strings (instances of <code>str</code>) if strings_only is True.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.remove_IUPAC","title":"<code>remove_IUPAC(from_file, to_file)</code>","text":"<p>remove non-valid symbols from FASTA file (using sed) ans store the result in a different location</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.remove_components_from_toplevel","title":"<code>remove_components_from_toplevel(log_pfx)</code>","text":"<p>Remove toplevel attribute for seq_regions that are \"components\" (parts of different seq_regions).</p> <p>SQL code.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.run","title":"<code>run()</code>","text":"<p>Entry point for the Ehive module. All processing is done here in this case.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.set_toplevel","title":"<code>set_toplevel(log_pfx, ignored_cs=[])</code>","text":"<p>Set toplevel(6) seq_region_attrib using ensembl script.</p> <p>Uses set_toplevel.pl ensembl script.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.sr_name_unversion","title":"<code>sr_name_unversion(cs, tbl, fld, log_pfx)</code>","text":"<p>Remove version suffix from the seq_region names</p> <p>Removes '.\\d+$' suffices from the seq_region names SQL code.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.unversion_scaffolds","title":"<code>unversion_scaffolds(cs_rank, logs)</code>","text":"<p>Unversion scaffold, remove \".\\d$\" from seq_region.names if there's a need</p> <p>Non-versioned syns for contigs (lower, sequence level), versioned for the rest.</p>"},{"location":"reference/ensembl/brc4/runnable/load_sequence_data/#src.ensembl.brc4.runnable.load_sequence_data.load_sequence_data.update_db_single_group","title":"<code>update_db_single_group(dict_of_col_to_value, table_name, work_dir, where=None)</code>","text":"<p>Update given <code>table</code> name in db; set <code>col = val</code> for all key/value pairs from <code>dict_of_cols_to_values</code></p> <p>If <code>where</code> condition is present its value is used for the \"WHERE\" SQL clause. Use <code>quote_or_null</code> (see definition below) method for string values, when putting values into <code>list_of_tuples</code></p> <p>SQL code</p>"},{"location":"reference/ensembl/brc4/runnable/manifest/","title":"manifest","text":""},{"location":"reference/ensembl/brc4/runnable/manifest_stats/","title":"manifest_stats","text":""},{"location":"reference/ensembl/brc4/runnable/manifest_stats/#src.ensembl.brc4.runnable.manifest_stats.manifest_stats","title":"<code>manifest_stats</code>","text":"<p>             Bases: <code>BaseRunnable</code></p>"},{"location":"reference/ensembl/brc4/runnable/manifest_stats/#src.ensembl.brc4.runnable.manifest_stats.manifest_stats.check_ncbi_stats","title":"<code>check_ncbi_stats(biotypes, accession)</code>","text":"<p>Use the dataset tool from NCBI to get stats and compare with what we have</p>"},{"location":"reference/ensembl/brc4/runnable/manifest_stats/#src.ensembl.brc4.runnable.manifest_stats.manifest_stats.compare_ncbi_counts","title":"<code>compare_ncbi_counts(prepared, ncbi)</code>","text":"<p>Compare specific gene stats from NCBI</p>"},{"location":"reference/ensembl/brc4/runnable/prepare_genome/","title":"prepare_genome","text":""},{"location":"reference/ensembl/brc4/runnable/read_json/","title":"read_json","text":""},{"location":"reference/ensembl/brc4/runnable/read_json/#src.ensembl.brc4.runnable.read_json.read_json","title":"<code>read_json</code>","text":"<p>             Bases: <code>BaseRunnable</code></p> <p>Read a json data from a file, and flow it out for the pipeline to use.</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <p>json to load</p> required <code>name</code> <p>key of the dataflow object associated with the json data</p> required Dataflows <p>2: one Dict record with the name as key, and the json data as value</p>"},{"location":"reference/ensembl/brc4/runnable/say_accession/","title":"say_accession","text":""},{"location":"reference/ensembl/brc4/runnable/say_accession/#src.ensembl.brc4.runnable.say_accession.say_accession","title":"<code>say_accession</code>","text":"<p>             Bases: <code>BaseRunnable</code></p> <p>Simple runnable to bring out the accession value for the pipeline to use.</p> <p>Parameters:</p> Name Type Description Default <code>genome_data</code> <p>a dict from genome_data following the schema from schemas/genome_schema.json</p> required Dataflows <p>2: a single value named accession</p>"},{"location":"reference/ensembl/brc4/runnable/seqregion_parser/","title":"seqregion_parser","text":""},{"location":"reference/ensembl/brc4/runnable/seqregion_parser/#src.ensembl.brc4.runnable.seqregion_parser.SeqregionParser","title":"<code>SeqregionParser</code>","text":"<p>Parser of a seq_region report from INSDC/RefSeq.</p> <p>The main method of the Parser is get_report_regions, which returns a Dict of seq_regions, where the keys are the names.</p>"},{"location":"reference/ensembl/brc4/runnable/seqregion_parser/#src.ensembl.brc4.runnable.seqregion_parser.SeqregionParser.get_report_regions","title":"<code>get_report_regions(report_path, accession, use_refseq=False)</code>","text":"<p>Get seq_region data from report file.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>Path</code> <p>Path to the INSDC seq_region report.</p> required <code>use_refseq</code> <code>bool</code> <p>Expect a RefSeq seq_region report.</p> <code>False</code> <p>Returns:     A dict of seq_regions dicts, with their name as the key</p>"},{"location":"reference/ensembl/brc4/runnable/seqregion_parser/#src.ensembl.brc4.runnable.seqregion_parser.SeqregionParser.make_seq_region","title":"<code>make_seq_region(row, assembly_level, use_refseq)</code>","text":"<p>From a row of the report, create one seq_region dict.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Dict[str, str]</code> <p>A seq_region row from the INSDC report.</p> required <code>assembly_level</code> <code>str</code> <p>what level is the seq_region (chromosome, contig, etc.)</p> required <code>use_refseq</code> <code>bool</code> <p>Expect a RefSeq seq_region report.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A seq_region dict.</p>"},{"location":"reference/ensembl/brc4/runnable/seqregion_parser/#src.ensembl.brc4.runnable.seqregion_parser.SeqregionParser.report_to_csv","title":"<code>report_to_csv(report_path)</code>","text":"<p>Load an assembly report as a csv string.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>Path</code> <p>Path to the INSDC seq_region report.</p> required <p>Returns:     The csv as a string, and the head metadata as a dict.</p>"},{"location":"reference/ensembl/io/","title":"Index","text":""},{"location":"reference/ensembl/io/genomio/","title":"Index","text":"<p>GenomIO modules.</p>"},{"location":"reference/ensembl/io/genomio/db_factory/","title":"db_factory","text":"<p>Generates one JSON file per metadata type inside <code>manifest</code>, including the manifest itself.</p> <p>Can be imported as a module and called as a script as well, with the same parameters and expected outcome.</p>"},{"location":"reference/ensembl/io/genomio/db_factory/#src.ensembl.io.genomio.db_factory.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/db_factory/#src.ensembl.io.genomio.db_factory.format_db_data","title":"<code>format_db_data(server, dbs, brc_mode=False)</code>","text":"<p>Returns metadata from a list of databases on a server.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>CoreServer</code> <p>Server where all the databases are hosted.</p> required <code>dbs</code> <code>List[str]</code> <p>List of database names.</p> required <code>brc_mode</code> <code>bool</code> <p>If true, assign <code>BRC4.organism_abbrev</code> as the species, and <code>BRC4.component</code> as the division. Otherwise, the species will be <code>species.production_name</code> and the division will be <code>species.division</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of dictionaries with 3 keys: \"database\", \"species\" and \"division\".</p>"},{"location":"reference/ensembl/io/genomio/db_factory/#src.ensembl.io.genomio.db_factory.get_metadata_value","title":"<code>get_metadata_value(metadata, key)</code>","text":"<p>Returns the first element in the list assigned to <code>key</code> in <code>metadata</code>.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>Dict[str, List]</code> <p>Map of metadata information to lists of values.</p> required <code>key</code> <code>str</code> <p>Metadata key to search for.</p> required"},{"location":"reference/ensembl/io/genomio/db_factory/#src.ensembl.io.genomio.db_factory.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/","title":"events_dumper","text":"<p>Module to dump stable id events from an Ensembl Core database</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs","title":"<code>DumpStableIDs</code>","text":"<p>An processor that create events from pairs of ids and can print those events out.</p> <p>Attributes:</p> Name Type Description <code>server</code> <p>a core server set to a database, to retrieve the data from.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.__init__","title":"<code>__init__(server)</code>","text":"<p>Create a processor for events</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.extend_event","title":"<code>extend_event(event, from_list, to_list)</code>","text":"<p>Given an event, aggregate ids in the 'from' and 'to' sets, to connect the whole group.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>StableIdEvent</code> <p>the event to extend.</p> required <code>from_list</code> <code>DictToIdsSet</code> <p>A dict a the from ids, and their corresponding to ids.</p> required <code>to_list</code> <code>DictToIdsSet</code> <p>A dict of the to ids, and their corresponding from ids.</p> required <p>Returns:</p> Type Description <code>StableIdEvent</code> <p>A tuple of the extended event, and the from_list and to_list from which the ids that</p> <code>DictToIdsSet</code> <p>have been added to the event have been removed.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.get_history","title":"<code>get_history()</code>","text":"<p>Retrieve all events from a database.</p> <p>Returns:</p> Type Description <code>List</code> <p>A list of all events.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.get_mapping_sessions","title":"<code>get_mapping_sessions()</code>","text":"<p>Retrieve the mapping sessions from the connected database.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of sessions, as dicts: {'id: str, 'release': str, 'date': str}.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.get_pairs","title":"<code>get_pairs(session_id)</code>","text":"<p>Retrieve all pair of ids for a given session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>int</code> <p>id of a session from the connected database.</p> required <p>Returns:</p> Type Description <code>List[Pair]</code> <p>A list of all pairs of ids, as dicts: {'old_id': str, 'new_id': str}.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.get_pairs_from_to","title":"<code>get_pairs_from_to(pairs)</code>  <code>staticmethod</code>","text":"<p>From a list of Pairs, extract a mapping of all ids from a given old id (from_list), and a mapping of all ids to a given new id (to_list).</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>List[Pair]</code> <p>list of Pairs.</p> required Return <p>Tuple of 2 values:    from_list    to_list</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.make_events","title":"<code>make_events(pairs)</code>","text":"<p>Given a list of pairs, create events.</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>List[Pair]</code> <p>list of Pair.</p> required Return <p>A list of events.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.DumpStableIDs.print_events","title":"<code>print_events(events, output_file)</code>","text":"<p>Print events in a format for BRC.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[StableIdEvent]</code> <p>list of events for a given genome.</p> required <code>output_file</code> <code>Path</code> <p>where the events will be printed.</p> required"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.Pair","title":"<code>Pair</code>","text":"<p>Simple old_id - new_id pair representation</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.Pair.__init__","title":"<code>__init__(old_id, new_id)</code>","text":"<p>Create a pair with an old_id and a new_id if provided</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.Pair.has_new_id","title":"<code>has_new_id()</code>","text":"<p>Check if the pair has a new_id</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.Pair.has_old_id","title":"<code>has_old_id()</code>","text":"<p>Check if the pair has an old_id</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.Pair.is_empty","title":"<code>is_empty()</code>","text":"<p>Test if the current pair has no id.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent","title":"<code>StableIdEvent</code>","text":"<p>Represents a stable id event from one gene set version to another one. Various events: - new genes - deleted genes - merged genes (several genes to one) - split genes (one gene to several) - mixed (several genes to several)</p> <p>Attributes:</p> Name Type Description <code>from_list</code> <p>List of genes the previous gene set.</p> <code>to_list</code> <p>List of genes in the new gene set.</p> <code>release</code> <p>New gene set release name.</p> <code>date</code> <p>Date of the new gene set.</p> <code>name</code> <p>Name of the event (will be updated automatically).</p> <code>pairs</code> <code>List[Pair]</code> <p>All pair of ids for this event.</p> <p>Any gene set before 2019-09 is dubbed pre-BRC4.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.__init__","title":"<code>__init__(from_list=None, to_list=None, release=None, date=None)</code>","text":"<p>Create a stable id event from a set of old_ids to a set of new_ids</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the stable id event</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.add_from","title":"<code>add_from(from_id)</code>","text":"<p>Store an id in the from_set.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.add_pair","title":"<code>add_pair(pair)</code>","text":"<p>Keeps a record of this pair.</p> <p>Parameters:</p> Name Type Description Default <code>pair</code> <code>Pair</code> <p>a Pair to record.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>can't add an empty pair.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.add_pairs","title":"<code>add_pairs(pairs)</code>","text":"<p>Provided all the pairs, keep those that are used by this event.</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>List[Pair]</code> <p>list of Pair.</p> required"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.add_to","title":"<code>add_to(to_id)</code>","text":"<p>Store an id in the from_set.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.brc_format_1","title":"<code>brc_format_1()</code>","text":"<p>Returns a list events, one line per initial ID, in the following TSV format: - old gene id - event name - release - release date - list of old gene ids in the event (comma-separated) - list of new gene ids in the event (comma-separated)</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.brc_format_2","title":"<code>brc_format_2()</code>","text":"<p>Returns a list of combination of genes, one line per combination of old_id - new_ids, in the following TSV format: - old gene id - new gene id - event name - release - release date</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.clean_pairs","title":"<code>clean_pairs()</code>","text":"<p>Remove the empty old pairs when the event is not 'new'.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.clean_set","title":"<code>clean_set(this_list)</code>  <code>staticmethod</code>","text":"<p>Removes any empty elements from a list.</p> <p>Parameters:</p> Name Type Description Default <code>this_list</code> <code>Set</code> <p>list of items, so of which can be empty/None.</p> required <p>Returns:</p> Type Description <code>Set</code> <p>The cleaned list.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.get_full_release","title":"<code>get_full_release()</code>","text":"<p>Returns the expanded release name, pre-BRC4 or <code>BRC4 = build</code>.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.get_name","title":"<code>get_name()</code>","text":"<p>Retrieve the name for this event, update it beforehand.</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.set_date","title":"<code>set_date(date)</code>","text":"<p>Set the date of the release for this event</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.StableIdEvent.set_release","title":"<code>set_release(release)</code>","text":"<p>Set the release name of the event</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.UnsupportedEvent","title":"<code>UnsupportedEvent</code>","text":"<p>             Bases: <code>ValueError</code></p> <p>If an event is not supported</p>"},{"location":"reference/ensembl/io/genomio/events_dumper/#src.ensembl.io.genomio.events_dumper.main","title":"<code>main()</code>","text":"<p>Main entrypoint</p>"},{"location":"reference/ensembl/io/genomio/events_loader/","title":"events_loader","text":"<p>Provided a file with events, load them in a core database.</p> <p>cf the load_events functions for the events tab file format.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection","title":"<code>EventCollection</code>","text":"<p>\"Collection of events with loader/writer in various formats.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.add_deletes","title":"<code>add_deletes(genes, release_name='release_name', release_date='release_date')</code>","text":"<p>Add deletion events from a list of deleted genes.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.load_events","title":"<code>load_events(input_file)</code>","text":"<p>Load events from input file. Expected tab file columns: old_id, new_id, event_name, release, release_date</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.load_events_from_gene_diff","title":"<code>load_events_from_gene_diff(input_file, release_name='release_name', release_date='release_date')</code>","text":"<p>Load events from input file from gene_diff.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.remap_to_ids","title":"<code>remap_to_ids(map_dict)</code>","text":"<p>Using a mapping dict, remap the to_id of all events.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.write_events_to_db","title":"<code>write_events_to_db(session, update=False)</code>","text":"<p>Insert the events in the core database. A mapping session is created for each different 'release'.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.EventCollection.write_events_to_file","title":"<code>write_events_to_file(output_file)</code>","text":"<p>Write the events to a file.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.IdEvent","title":"<code>IdEvent</code>  <code>dataclass</code>","text":"<p>Simple representation for the events from the input file</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.IdEvent.is_change","title":"<code>is_change()</code>","text":"<p>If the event is an update of an existing gene.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.MapSession","title":"<code>MapSession</code>","text":"<p>Simple mapping_sessions representation from the input file</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.MapSession.add_event","title":"<code>add_event(event)</code>","text":"<p>Add an event to this mapping_session</p>"},{"location":"reference/ensembl/io/genomio/events_loader/#src.ensembl.io.genomio.events_loader.main","title":"<code>main()</code>","text":"<p>Main entrypoint</p>"},{"location":"reference/ensembl/io/genomio/integrity/","title":"integrity","text":"<p>Compare the genomic data in a DNA fasta file, seq_region json, gene models GFF3 and peptide fasta to ensure their contents are in sync.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool","title":"<code>IntegrityTool</code>","text":"<p>Check the integrity of sequence and annotation files in the genome</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.add_errors","title":"<code>add_errors(*args)</code>","text":"<p>Store the given errors in the list.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.check_ids","title":"<code>check_ids(list1, list2, name)</code>","text":"<p>Compare the ids in list1 and list2.</p> <p>Parameters:</p> Name Type Description Default <code>list1</code> <p>dict containing sequence ids retrieved from functional.json.</p> required <code>list2</code> <p>dict containing length and id in the retrieved from the gff.</p> required <code>name</code> <p>string</p> required Return <p>Error if the ids in functional.json and gff do not match.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.check_integrity","title":"<code>check_integrity()</code>","text":"<p>Load files listed in the manifest.json and check the integrity. Check if the files are correct by verifying the MD5 hash. Check if translation, functional annotation and sequence region ids and lengths are consistent with the information in gff. Compare sequence length from fasta_dna file to seq_region.json metadata.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.check_lengths","title":"<code>check_lengths(list1, list2, name, allowed_len_diff=None, special_diff=False)</code>","text":"<p>Check the difference in ids and length between list1 and list2.     There are a few special cases here where we allow a certain asymmetry     by changing the values of the arguments.</p> <p>Parameters:</p> Name Type Description Default <code>list1</code> <p>dict containing length and id of the sequence from fasta files.</p> required <code>list2</code> <p>dict containing length and id in the retrieved from the gff.</p> required <code>name</code> <p>string</p> required None to to not accept differences in length between list1 and list2. <p>The value can be changed based on how much difference in sequence length we are wanting to accept.</p> set as False when no special length difference is expected between the lists. <p>This can be changed if we want to report common sequences with 1 BP difference.</p> <p>Returns:</p> Type Description <p>Error if there is a difference in length or ids between the lists.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.check_seq_region_lengths","title":"<code>check_seq_region_lengths(seqrs, feats, name, circular=None)</code>","text":"<p>Check the integrity of seq_region.json file by comparing the length of the sequence     to fasta files and the gff.</p> <pre><code>Seq_region file is in json format containing the metadata of the sequence.\nIt contains sequence id, length, location and the synonyms for the sequence name\nfrom different sources.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>seqs</code> <p>Sequence name and length retrieved from seq_region.json file.</p> required <code>feats</code> <code>Dict[str, Any]</code> <p>Sequence name and length retrieved from the fasta and gff file.</p> required <code>name</code> <code>str</code> <p>Name of the check to show in the logs.</p> required <code>circular</code> <code>Optional[Dict[str, Any]]</code> <p>Whether any sequence is circular.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Error if there are common sequences with difference in ids</p> <code>None</code> <p>and if the sequences are not consistent in the files.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.set_brc_mode","title":"<code>set_brc_mode(brc_mode)</code>","text":"<p>Set brc mode for this tool and the manifest.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.IntegrityTool.set_ignore_final_stops","title":"<code>set_ignore_final_stops(ignore_final_stops)</code>","text":"<p>Set ignore_final_stops (when calculating peptide length) for this tool and the manifest.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.InvalidIntegrityError","title":"<code>InvalidIntegrityError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When a file integrity check fails</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest","title":"<code>Manifest</code>","text":"<p>Representation of the manifest and its files.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_agp_seq_regions","title":"<code>get_agp_seq_regions(agp_dict)</code>","text":"<p>AGP files describe the assembly of larger sequence objects using smaller objects.     Eg: describes the assembly of scaffolds from contigs.</p> <p>Parameters:</p> Name Type Description Default <code>agp_dict</code> <p>dict containing the information about the sequence.</p> required Note <p>AGP file is only used in the older builds, not used for current processing.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_circular","title":"<code>get_circular(name)</code>","text":"<p>Returns a dict associating IDs with their is_circular flag from a given file name.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_fasta_lengths","title":"<code>get_fasta_lengths(fasta_path, ignore_final_stops=False)</code>","text":"<p>Check if the fasta files have the correct ids and no stop codon.</p> <p>Parameters:</p> Name Type Description Default <code>fasta_path</code> <p>Path to fasta_dna and fasta_pep files.</p> required <p>Returns:</p> Type Description <p>Error if any empty ids, non-unique ids or stop codons are found in the fasta files.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_functional_annotation","title":"<code>get_functional_annotation(json_path)</code>","text":"<p>Load the functional annotation file to retrieve the gene_id and translation id.     A functional annotation file contains information about a gene.     The functional annotation file is stored in a json format containing     the description, id and object type (eg: \"gene\", \"transcript\", \"translation\").</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <code>Path</code> <p>Path to functional_annotation.json.</p> required <p>Returns:</p> Type Description <code>None</code> <p>dict with gene and translation ids.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_gff3","title":"<code>get_gff3(gff3_path)</code>","text":"<p>A GFF parser is used to retrieve information in the GFF file such as    gene and CDS ids and their corresponding lengths.</p> <p>Parameters:</p> Name Type Description Default <code>gff3_path</code> <code>Path</code> <p>Path to gff3 file.</p> required"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_lengths","title":"<code>get_lengths(name)</code>","text":"<p>Returns a dict associating IDs with their length from a given file name.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.get_manifest","title":"<code>get_manifest(manifest_path)</code>","text":"<p>Load the content of a manifest file.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict[str, Any]</code> <p>Content of the manifest file.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.has_lengths","title":"<code>has_lengths(name)</code>","text":"<p>Check if a given name has lengths records.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.Manifest.prepare_integrity_data","title":"<code>prepare_integrity_data()</code>","text":"<p>Read all the files and keep a record (IDs and their lengths) for each cases to be compared later.</p>"},{"location":"reference/ensembl/io/genomio/integrity/#src.ensembl.io.genomio.integrity.main","title":"<code>main()</code>","text":"<p>Main entrypoint.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/","title":"manifest_maker","text":"<p>Creates a manifest file in a folder depending on the file names ends.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/#src.ensembl.io.genomio.manifest_maker.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/#src.ensembl.io.genomio.manifest_maker.ManifestMaker","title":"<code>ManifestMaker</code>","text":"<p>Given a directory with genomic files, create a manifest json file for them.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/#src.ensembl.io.genomio.manifest_maker.ManifestMaker.create_manifest","title":"<code>create_manifest()</code>","text":"<p>Create the manifest file.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/#src.ensembl.io.genomio.manifest_maker.ManifestMaker.get_files_checksums","title":"<code>get_files_checksums()</code>","text":"<p>Compute the checksum of all the files in the directory.</p>"},{"location":"reference/ensembl/io/genomio/manifest_maker/#src.ensembl.io.genomio.manifest_maker.main","title":"<code>main()</code>","text":"<p>Main entrypoint.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/","title":"manifest_stats","text":"<p>Compute stats from the current genome files associated with the manifest.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.BiotypeCounter","title":"<code>BiotypeCounter</code>","text":"<p>A counter for a given biotype, given a list of features.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.BiotypeCounter.add_id","title":"<code>add_id(feature_id)</code>","text":"<p>Add a feature to the counter.</p> <p>Parameters:</p> Name Type Description Default <code>feature_id</code> <code>str</code> <p>Feature id to add.</p> required"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.BiotypeCounter.unique_count","title":"<code>unique_count()</code>","text":"<p>Total number feature ids added to the counter so far.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>number of features in the counter.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.StatsError","title":"<code>StatsError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when stats could not be computed.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats","title":"<code>manifest_stats</code>","text":"<p>Representation of the statistics of the set of files listed in the manifest file provided.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.biotypes_stats","title":"<code>biotypes_stats(biotypes)</code>","text":"<p>Prepare biotype stats in order of their name.</p> <p>Parameters:</p> Name Type Description Default <code>biotypes</code> <code>Dict[str, BiotypeCounter]</code> <p>Biotypes counters.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>A list with the computed statistics in a printable format.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.check_ncbi_stats","title":"<code>check_ncbi_stats(biotypes)</code>","text":"<p>Use the dataset tool from NCBI to get stats and compare with what we have</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.compare_ncbi_counts","title":"<code>compare_ncbi_counts(biotypes, ncbi)</code>","text":"<p>Compare specific gene stats from NCBI</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.coord_systems_stats","title":"<code>coord_systems_stats(coord_systems)</code>","text":"For each coord_system compute various stats <ul> <li>number of sequences</li> <li>sequence length sum, minimum, maximum, mean</li> </ul> <p>Parameters:</p> Name Type Description Default <code>coord_systems</code> <code>Dict[str, List[int]]</code> <p>Coordinate system dictionary of lengths.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>A list with the computed statistics in a printable format.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.count_biotypes","title":"<code>count_biotypes(gff3_path)</code>","text":"<p>Count the biotypes in a GFF3 file.</p> <p>Parameters:</p> Name Type Description Default <code>gff3_path</code> <code>Path</code> <p>Path to the GFF3 file.</p> required <p>Returns:</p> Type Description <code>Dict[str, BiotypeCounter]</code> <p>Dictionary of biotype counters.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.get_gff3_stats","title":"<code>get_gff3_stats(gff3_path)</code>","text":"<p>Extract the gene models from the GFF3 file and compute stats.</p> <p>Parameters:</p> Name Type Description Default <code>gff3_path</code> <code>Path</code> <p>the GFF3 file.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List[str]</code> <p>Stats from the gene model.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.get_manifest","title":"<code>get_manifest()</code>","text":"<p>Get the files metadata from the manifest json file.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>A representation of the manifest json data.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.get_seq_region_stats","title":"<code>get_seq_region_stats(seq_region_path)</code>","text":"<p>Compute stats from the seq_region json file.</p> <p>Parameters:</p> Name Type Description Default <code>seq_region_path</code> <code>Path</code> <p>the seq_region json file.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Stats from the seq_regions.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.increment_biotype","title":"<code>increment_biotype(biotypes, feature_id, feature_biotype)</code>  <code>staticmethod</code>","text":"<p>Add the feature to their respective biotype counter.</p> <p>Parameters:</p> Name Type Description Default <code>biotypes</code> <code>Dict[str, BiotypeCounter]</code> <p>All current biotypes, with their counter.</p> required <code>feature_id</code> <code>str</code> <p>Feature id to be counted.</p> required <code>feature_biotype</code> <code>str</code> <p>The biotype of the feature.</p> required"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.run","title":"<code>run(stats_path)</code>","text":"<p>Compute stats in the files and output a stats.txt file in the same folder.</p> <p>Raises:</p> Type Description <code>StatsError</code> <p>Could not compute some stats.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.manifest_stats.seq_region_special_stats","title":"<code>seq_region_special_stats(circular=0, locations=None, codon_tables=None)</code>","text":"<p>Prepare stats in case there are circular regions, specific locations and codon_tables.         stats.append(f\"{count: 9f}      {name}\")</p> <p>Parameters:</p> Name Type Description Default <code>circular</code> <code>int</code> <p>Number of circular regions. Defaults to 0.</p> <code>0</code> <code>locations</code> <code>Optional[List[str]]</code> <p>The regions and their location. Defaults to None.</p> <code>None</code> <code>codon_tables</code> <code>Optional[List[str]]</code> <p>The regions and their codon_table. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list with the computed statistics in a printable format.</p>"},{"location":"reference/ensembl/io/genomio/manifest_stats/#src.ensembl.io.genomio.manifest_stats.main","title":"<code>main()</code>","text":"<p>Main entrypoint.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/","title":"seq_region_dumper","text":"<p>Generates one JSON file per metadata type inside <code>manifest</code>, including the manifest itself.</p> <p>Can be imported as a module and called as a script as well, with the same parameters and expected outcome.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.MapFormatError","title":"<code>MapFormatError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Error when parsing the db map file.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.add_attribs","title":"<code>add_attribs(seq_region, attrib_dict)</code>","text":"<p>Map seq_regions attribs to a specific name and type defined below.</p> <p>Parameters:</p> Name Type Description Default <code>seq_region</code> <code>Dict</code> <p>A seq_region dict to modify.</p> required <code>attrib_dict</code> <code>Dict</code> <p>The attribs for this seq_region.</p> required"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_attribs","title":"<code>get_attribs(seq_region)</code>","text":"<p>Given a seq_region, extract the attribs as value-source items.</p> <p>Parameters:</p> Name Type Description Default <code>seq_region</code> <code>SeqRegion</code> <p>The seq_region from which the attribs are extracted.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>All attribs as a dict with 'value' and 'source' keys.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_coord_systems","title":"<code>get_coord_systems(session)</code>","text":"<p>Retrieve the coord_system metadata from the current core.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Session for the current core.</p> required <p>Returns:</p> Type Description <code>List[CoordSystem]</code> <p>List[CoordSystem]: All coord_systems in the core.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_external_db_map","title":"<code>get_external_db_map(map_file)</code>","text":"<p>Class method, set up the map for all SeqRegion objects</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_karyotype","title":"<code>get_karyotype(seq_region)</code>","text":"<p>Given a seq_region, extract the karyotype bands.</p> <p>Parameters:</p> Name Type Description Default <code>seq_region</code> <code>SeqRegion</code> <p>The seq_region from which the karyotype bands are extracted.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>All karyotype bands as a dict with values 'start', 'end', 'name' 'stain', 'structure'.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_seq_regions","title":"<code>get_seq_regions(session, external_db_map)</code>","text":"<p>Retrieve the seq_region metadata from the current core. Include synonyms, attribs and karyotypes. Only the top level sequences are exported.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Session from the current core.</p> required <code>external_db_map</code> <code>dict</code> <p>Mapping of external_db names for the synonyms.</p> required <p>Returns:</p> Type Description <code>List[SeqRegion]</code> <p>List[SeqRegion]: All seq_regions in the core.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.get_synonyms","title":"<code>get_synonyms(seq_region, external_db_map)</code>","text":"<p>Get all synonyms for a given seq_region. Use the mapping for synonym source names.</p> <p>Parameters:</p> Name Type Description Default <code>seq_region</code> <code>SeqRegion</code> <p>Seq_region from which the synonyms are extracted.</p> required <code>external_db_map</code> <code>dict</code> <p>To map the synonym source names.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>All synonyms as a dict with 'name' and 'source' keys.</p>"},{"location":"reference/ensembl/io/genomio/seq_region_dumper/#src.ensembl.io.genomio.seq_region_dumper.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/assembly/","title":"assembly","text":"<p>GenomIO assembly preparation modules.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/","title":"get_assembly_data","text":"<p>Download an assembly data files from INSDC or RefSeq.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.FileDownloadError","title":"<code>FileDownloadError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When a file download fails or there is a problem with that file.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of this module.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.UnsupportedFormatError","title":"<code>UnsupportedFormatError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When a string does not have the expected format.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.download_files","title":"<code>download_files(accession, dl_dir, max_redo)</code>","text":"<p>Given an INSDC accession, download all available files from the ftp to the download dir</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.get_checksums","title":"<code>get_checksums(checksum_path)</code>","text":"<p>Get a dict of checksums from a file, with file names as keys and sums as values</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.get_files_selection","title":"<code>get_files_selection(dl_dir)</code>","text":"<p>Among all the files downloaded, only keep a subset for which we use a controlled name. Return a dict[name] = file_path The file_path is relative to the download dir Current names are defined in _FILE_ENDS</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.get_root_name","title":"<code>get_root_name(dl_dir)</code>","text":"<p>Get root name for assembly files, using the report file as base</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.main","title":"<code>main()</code>","text":"<p>Module's entry-point.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.md5_files","title":"<code>md5_files(dl_dir)</code>","text":"<p>Check all files checksums with the sums listed in a checksum file, if available. Return False if there is no checksum file, or a file is missing, or has a wrong checksum.</p>"},{"location":"reference/ensembl/io/genomio/assembly/get_assembly_data/#src.ensembl.io.genomio.assembly.get_assembly_data.retrieve_assembly_data","title":"<code>retrieve_assembly_data(accession, asm_download_dir, max_increment=0, max_redo=3)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>accession</code> <code>str</code> <p>Genome Assembly accession</p> required <code>asm_download_dir</code> <code>PathLike</code> <p>Path to directory used to store retrieved</p> required <code>max_increment</code> <code>int</code> <p>If you want to allow assembly versions</p> <code>0</code> <code>max_redo</code> <code>int</code> <p>Set max number of times to retry downloading a file</p> <code>3</code>"},{"location":"reference/ensembl/io/genomio/events/","title":"events","text":"<p>GenomIO EVENTS modules.</p>"},{"location":"reference/ensembl/io/genomio/events/format_events/","title":"format_events","text":"<p>Module to map stable ids in a file, given a mapping.</p>"},{"location":"reference/ensembl/io/genomio/events/format_events/#src.ensembl.io.genomio.events.format_events.IdsMapper","title":"<code>IdsMapper</code>","text":"<p>Simple mapper object, to cleanly get a mapping dict.</p>"},{"location":"reference/ensembl/io/genomio/events/format_events/#src.ensembl.io.genomio.events.format_events.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/events/format_events/#src.ensembl.io.genomio.events.format_events.load_list","title":"<code>load_list(list_file)</code>","text":"<p>Return a simple list from a file.</p>"},{"location":"reference/ensembl/io/genomio/events/format_events/#src.ensembl.io.genomio.events.format_events.main","title":"<code>main()</code>","text":"<p>Main entrypoint</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/","title":"fastaprep","text":"<p>GenomIO FASTA preparation modules.</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/","title":"process_fasta","text":"<p>Takes a FASTA file (DNA or peptide), cleans it up and optionally excludes some IDs.</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/#src.ensembl.io.genomio.fastaprep.process_fasta.GFFParserError","title":"<code>GFFParserError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Error while parsing a GFF file.</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/#src.ensembl.io.genomio.fastaprep.process_fasta.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of this module.</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/#src.ensembl.io.genomio.fastaprep.process_fasta.get_peptides_to_exclude","title":"<code>get_peptides_to_exclude(genbank_path, seqr_to_exclude)</code>","text":"<p>Extract peptide IDs from a genbank file that are in a given list of seq regions</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/#src.ensembl.io.genomio.fastaprep.process_fasta.main","title":"<code>main()</code>","text":"<p>Module's entry-point.</p>"},{"location":"reference/ensembl/io/genomio/fastaprep/process_fasta/#src.ensembl.io.genomio.fastaprep.process_fasta.prep_fasta_data","title":"<code>prep_fasta_data(fasta_infile, genebank_infile, fasta_outfile, peptide_mode=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>fasta_file</code> <p>Input fasta file - DNA / Protein</p> required <code>genbank_infile</code> <p>Input genBank GBFF file (Optional)</p> required <code>output_dir</code> <p>Output folder for the fasta sequence file.</p> required <code>peptide_mode</code> <code>Optional[int]</code> <p>Process proteins not DNA (Optional)</p> <code>0</code>"},{"location":"reference/ensembl/io/genomio/genbank/","title":"genbank","text":"<p>GenomIO Genbank modules.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/","title":"extract_from_genbank","text":"<p>Parse a Genbank file and creates cleaned up files from it: - DNA fasta - Peptide fasta - Gene models GFF3 - seq_regions json - genome metadata json</p> <p>Raises:</p> Type Description <code>GFFPArseError</code> <p>If the structure of the gb file can't be parsed.</p> <code>UnsupportedData</code> <p>If some data is not as expected.</p> <p>Returns:</p> Name Type Description <code>json_output</code> <p>json file with a dict that contains all genome files created.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.FormattedFilesGenerator","title":"<code>FormattedFilesGenerator</code>","text":"<p>Contains a parser to load data from a file, and output a set of files that follow our schema for input into a core database</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.FormattedFilesGenerator.extract_gb","title":"<code>extract_gb(out_dir)</code>","text":"<p>Extract data from a Genbank file and create files from it.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.FormattedFilesGenerator.parse_genbank","title":"<code>parse_genbank(gb_file)</code>","text":"<p>Load a sequence from a Genbank file</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.FormattedFilesGenerator.set_prefix","title":"<code>set_prefix(prefix)</code>","text":"<p>Define a prefix to add to the feature IDs</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.FormattedFilesGenerator.set_production_name","title":"<code>set_production_name(prod_name)</code>","text":"<p>Define a production_name for the genome</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.GBParseError","title":"<code>GBParseError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Error when parsing the Genbank file.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.GenomeFiles","title":"<code>GenomeFiles</code>","text":"<p>             Bases: <code>dict</code></p> <p>Store the representation of the genome files created.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.UnsupportedData","title":"<code>UnsupportedData</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When an expected data is not supported by the current parser.</p>"},{"location":"reference/ensembl/io/genomio/genbank/extract_from_genbank/#src.ensembl.io.genomio.genbank.extract_from_genbank.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/genbank/get_genbank/","title":"get_genbank","text":"<p>Download a Genbank file from NCBI from an accession.</p> <p>Raises:</p> Type Description <code>DownloadError</code> <p>if the download fails</p>"},{"location":"reference/ensembl/io/genomio/genbank/get_genbank/#src.ensembl.io.genomio.genbank.get_genbank.DownloadError","title":"<code>DownloadError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>In case a download failed.</p>"},{"location":"reference/ensembl/io/genomio/genbank/get_genbank/#src.ensembl.io.genomio.genbank.get_genbank.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/genbank/get_genbank/#src.ensembl.io.genomio.genbank.get_genbank.download_genbank","title":"<code>download_genbank(accession, output_gb)</code>","text":"<p>Given a GenBank accession, download via NCBI Entrez service the corresponding file in GenBank format.</p> <p>Parameters:</p> Name Type Description Default <code>accession</code> <code>str</code> <p>INSDC Genbank record accession.</p> required <code>output_gb</code> <code>PathLike</code> <p>Path to the downloaded record in Genbank format.</p> required"},{"location":"reference/ensembl/io/genomio/genbank/get_genbank/#src.ensembl.io.genomio.genbank.get_genbank.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/","title":"genome_metadata","text":"<p>GenomIO Genome Metadata modules.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/","title":"compare_genome_stats","text":"<p>Compare stats in a JSON from NCBI dataset and a JSON from our core db. Returns the JSON from our core db including a section with comparisons.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/#src.ensembl.io.genomio.genome_metadata.compare_genome_stats.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/#src.ensembl.io.genomio.genome_metadata.compare_genome_stats.compare_annotation","title":"<code>compare_annotation(ncbi, core)</code>","text":"<p>Compare NCBI vs Core annotation stats (biotype counts).</p> <p>Parameters:</p> Name Type Description Default <code>ncbi</code> <code>Dict</code> <p>Dict of biotype counts from NCBI.</p> required <code>core</code> <code>Dict</code> <p>Dict of biotype counts from the core.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Each count from NCBI, from Core, and their diff.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/#src.ensembl.io.genomio.genome_metadata.compare_genome_stats.compare_assembly","title":"<code>compare_assembly(ncbi, core)</code>","text":"<p>Returns a compilation of count comparisons. Each comparison is a dict with the value from NCBI, from Core, and their diff.</p> <p>Parameters:</p> Name Type Description Default <code>ncbi</code> <code>Dict[str, Any]</code> <p>Dict of stats from NCBI.</p> required <code>core</code> <code>Dict[str, Any]</code> <p>Dict of assembly stats from the core.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict[str, Any]</code> <p>Each count from NCBI, from Core, and their diff.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/#src.ensembl.io.genomio.genome_metadata.compare_genome_stats.compare_stats","title":"<code>compare_stats(ncbi, core)</code>","text":"<p>Compare stats from NCBI and our core.</p> <p>Parameters:</p> Name Type Description Default <code>ncbi</code> <code>Dict</code> <p>Dict of stats from NCBI.</p> required <code>core</code> <code>Dict</code> <p>Dict of stats from the core.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict[str, Any]</code> <p>Each count from NCBI, from Core, and their diff.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/compare_genome_stats/#src.ensembl.io.genomio.genome_metadata.compare_genome_stats.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/","title":"dump_genome_metadata","text":"<p>Generates a JSON file representing the genome metadata from a core database.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/#src.ensembl.io.genomio.genome_metadata.dump_genome_metadata.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/#src.ensembl.io.genomio.genome_metadata.dump_genome_metadata.check_assembly_version","title":"<code>check_assembly_version(gmeta_out)</code>","text":"<p>Update the assembly version of the genome metadata provided to use an integer. Get the version from the assembly accession as alternative.</p> <p>Parameters:</p> Name Type Description Default <code>gmeta</code> <code>Dict[str, Any]</code> <p>Nested metadata key values from the core metadata table.</p> required"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/#src.ensembl.io.genomio.genome_metadata.dump_genome_metadata.filter_genome_meta","title":"<code>filter_genome_meta(gmeta)</code>","text":"<p>Returns a filtered metadata dict with only predefined keys. Also converts expected numbers to integers (to follow the genome json schema).</p> <p>Parameters:</p> Name Type Description Default <code>gmeta</code> <code>Dict[str, Any]</code> <p>Nested metadata key values from the core metadata table.</p> required"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/#src.ensembl.io.genomio.genome_metadata.dump_genome_metadata.get_genome_metadata","title":"<code>get_genome_metadata(session)</code>","text":"<p>Retrieve a select list of metadata from the core database.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Session for the current core.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A nested dict.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_metadata/#src.ensembl.io.genomio.genome_metadata.dump_genome_metadata.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/","title":"dump_genome_stats","text":"<p>Generates a JSON file representing various stats for the assembly and annotation from a core db.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by this script.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator","title":"<code>StatsGenerator</code>","text":"<p>Interface to extract stats from a core database.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_annotation_stats","title":"<code>get_annotation_stats()</code>","text":"<p>Returns a dict of stats about the coordinate systems (number of biotypes, etc.).</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_assembly_stats","title":"<code>get_assembly_stats()</code>","text":"<p>Returns a dict of stats about the assembly.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_attrib_counts","title":"<code>get_attrib_counts(code)</code>","text":"<p>Returns a dict of count for each value counted with the attrib_type code provided.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>Ensembl database attrib_type code.</p> required"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_biotypes","title":"<code>get_biotypes(table)</code>","text":"<p>Returns a dict of stats about the feature biotypes.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_feature_stats","title":"<code>get_feature_stats(table)</code>","text":"<p>Returns a dict of stats about a given feature.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.StatsGenerator.get_stats","title":"<code>get_stats()</code>","text":"<p>Returns a dict of stats about the assembly and annotation.</p>"},{"location":"reference/ensembl/io/genomio/genome_metadata/dump_genome_stats/#src.ensembl.io.genomio.genome_metadata.dump_genome_stats.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/gff3/","title":"gff3","text":"<p>GenomIO GFF3 modules.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/","title":"functional_annotation","text":"<p>Simple representation of gene features functional annotation extracted from a GFF3 file.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.AnnotationError","title":"<code>AnnotationError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>If anything wrong happens when recording annotations.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.DuplicateIdError","title":"<code>DuplicateIdError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Trying to add a feature with an ID already in use.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations","title":"<code>FunctionalAnnotations</code>","text":"<p>List of annotations extracted from a GFF3 file.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.add_feature","title":"<code>add_feature(feature, feat_type, parent_id=None)</code>","text":"<p>Add annotation for a feature of a given type. If a parent_id is provided, record the relatioship.</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>SeqFeature</code> <p>The feature to create an annotation.</p> required <code>feat_type</code> <code>str</code> <p>Type of the feature to annotate.</p> required"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.add_parent","title":"<code>add_parent(parent_type, parent_id, child_id)</code>","text":"<p>Record a parent-child IDs relationship for a given parent biotype.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.get_features","title":"<code>get_features(feat_type)</code>","text":"<p>Get all feature annotations for the requested type.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.get_parent","title":"<code>get_parent(parent_type, child_id)</code>","text":"<p>Returns the parent ID of a given child for a given parent biotype.</p>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.product_is_informative","title":"<code>product_is_informative(product, feat_id=None)</code>  <code>staticmethod</code>","text":"<p>Returns True if the product name contains informative words, False otherwise.</p> <p>It is considered uninformative when the description contains words such as \"hypothetical\" or or \"putative\". If a feature ID is provided, consider it uninformative as well (we do not want descriptions to be just the ID).</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>str</code> <p>A product name.</p> required <code>feat_id</code> <code>Optional[str]</code> <p>Feature ID (optional).</p> <code>None</code>"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.FunctionalAnnotations.to_json","title":"<code>to_json(out_path)</code>","text":"<p>Print out the current annotation list in a json file.</p> <p>Parameters:</p> Name Type Description Default <code>out_path</code> <code>PathLike</code> <p>JSON file path where to write the data.</p> required"},{"location":"reference/ensembl/io/genomio/gff3/functional_annotation/#src.ensembl.io.genomio.gff3.functional_annotation.MissingParentError","title":"<code>MissingParentError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Trying to add a feature without an expected parent.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/","title":"process_gff3","text":"<p>Standardize the gene model representation of a GFF3 file, and extract the functional annotation in a separate file.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFGeneMerger","title":"<code>GFFGeneMerger</code>","text":"<p>             Bases: <code>GFFParserCommon</code></p> <p>Specialized class to merge split genes in a GFF3 file, prior to further parsing.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFGeneMerger.merge","title":"<code>merge(in_gff_path, out_gff_path)</code>","text":"<p>Merge genes in a gff that are split in multiple lines</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFParserCommon","title":"<code>GFFParserCommon</code>","text":"<p>Heritable class to share the list of feature types supported or ignored by the parser</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFParserError","title":"<code>GFFParserError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Error when parsing a GFF3 file.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier","title":"<code>GFFSimplifier</code>","text":"<p>             Bases: <code>GFFParserCommon</code></p> <p>Parse a GGF3 file and output a cleaned up GFF3 + annotation json file.</p> <p>Raises:</p> Type Description <code>GFFParserError</code> <p>If an error cannot be automatically fixed.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.build_transcript","title":"<code>build_transcript(gene)</code>","text":"<p>Returns a transcript with same metadata as the gene provided.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.cds_gene","title":"<code>cds_gene(cds)</code>","text":"<p>Returns a gene created for a lone CDS.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.clean_extra_exons","title":"<code>clean_extra_exons(gene)</code>","text":"<p>Remove extra exons, already existing in the mRNA.</p> <p>This is a special case where a gene contains proper mRNAs, etc. but also extra exons for the same features. Those exons usually have an ID starting with \"id-\", so that's what we use to detect them.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.format_mobile_element","title":"<code>format_mobile_element(feat)</code>","text":"<p>Given a mobile_genetic_element feature, transform it into a transposable_element</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.gene_to_cds","title":"<code>gene_to_cds(gene)</code>","text":"<p>Returns a list of transcripts (with exons), from a gene with only CDS children.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.gene_to_exon","title":"<code>gene_to_exon(gene)</code>","text":"<p>Returns an intermediary transcript for a gene with direct exon children.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.generate_stable_id","title":"<code>generate_stable_id()</code>","text":"<p>Returns a new unique gene stable_id with a prefix.</p> <p>The id is made up of a prefix and a number, which is auto incremented. Define the prefix with the param \"stable_id_prefix\", or use the genome organism_abbrev and prepend \"TMP_\" to it.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.move_cds_to_mrna","title":"<code>move_cds_to_mrna(gene)</code>","text":"<p>Move CDS child features of a gene, to the mRNA.</p> <p>This is to fix the case where we have the following structure: gene -&gt; [ mRNA, CDSs ] and change it to gene -&gt; [ mRNA -&gt; [ CDSs ] ] The mRNA might have exons, in which case check that they match the CDS coordinates.</p> <p>Raises an exception if the feature structure is not recognized.</p> <p>Returns:     The gene where the CDSs have been moved, if needed.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.normalize_cds_id","title":"<code>normalize_cds_id(cds_id)</code>","text":"<p>Check the CDS ID is proper: - Remove any unnecessary prefixes around the CDS ID - Delete the ID if it is not proper</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.normalize_gene","title":"<code>normalize_gene(gene, fail_types)</code>","text":"<p>Returns a normalized gene structure, separate from the functional elements.</p> <p>Parameters:</p> Name Type Description Default <code>gene</code> <code>SeqFeature</code> <p>Gene object to normalize.</p> required <code>functional_annotation</code> <p>List of feature annotations (appended by this method).</p> required <code>fail_types</code> <code>Dict[str, int]</code> <p>List of feature types that are not supported (appended by this method).</p> required"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.normalize_gene_id","title":"<code>normalize_gene_id(gene)</code>","text":"<p>Remove any unnecessary prefixes around the gene ID.</p> <p>Generate a new stable id if it is not recognized as valid.</p> <p>Parameters:</p> Name Type Description Default <code>gene</code> <code>SeqFeature</code> <p>Gene feature to normalize.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A normalized gene id.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.normalize_pseudogene_cds","title":"<code>normalize_pseudogene_cds(gene)</code>","text":"<p>Ensure CDS from a pseudogene have a proper ID - different from the gene - derived from the gene if it is not proper</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.normalize_transcript_id","title":"<code>normalize_transcript_id(gene_id, number)</code>","text":"<p>Use a gene ID and a number to make a formatted transcript ID.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.remove_cds_from_pseudogene","title":"<code>remove_cds_from_pseudogene(gene)</code>","text":"<p>Remove CDS from a pseudogene This assumes the CDSs are sub features of the transcript or the gene</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.remove_prefixes","title":"<code>remove_prefixes(identifier, prefixes)</code>","text":"<p>Remove prefixes from an identifier if they are found Return the unaltered identifier otherwise</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.simpler_gff3","title":"<code>simpler_gff3(in_gff_path)</code>","text":"<p>Load a GFF3 from INSDC and rewrite it in a simpler version, and also write a functional_annotation file</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.transcript_for_gene","title":"<code>transcript_for_gene(gene)</code>","text":"<p>Returns a transcript, from a gene without one.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.transcript_gene","title":"<code>transcript_gene(ncrna)</code>","text":"<p>Create a gene for lone transcripts: 'gene' for tRNA/rRNA, and 'ncRNA' for all others</p> <p>Parameters:</p> Name Type Description Default <code>ncrna</code> <code>SeqFeature</code> <p>the transcript for which we want to create a gene.</p> required <p>Returns:</p> Type Description <code>SeqFeature</code> <p>The gene that contains the transcript.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.GFFSimplifier.valid_id","title":"<code>valid_id(name)</code>","text":"<p>Check that the format of a stable id is valid.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Standardize the gene model representation of a GFF3 file, and extract the functional annotation in a separate file. Input arguments expected by this script:</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.Records","title":"<code>Records</code>","text":"<p>             Bases: <code>list</code></p> <p>List of GFF3 SeqRecords.</p>"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.Records.to_gff","title":"<code>to_gff(out_gff_path)</code>","text":"<p>Print out the current list of records in a GFF3 file.</p> <p>Parameters:</p> Name Type Description Default <code>out_gff_path</code> <code>PathLike</code> <p>Path to GFF3 file where to write the records.</p> required"},{"location":"reference/ensembl/io/genomio/gff3/process_gff3/#src.ensembl.io.genomio.gff3.process_gff3.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p>"},{"location":"reference/ensembl/io/genomio/metadata/","title":"metadata","text":"<p>GenomIO prepare modules.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/","title":"prepare_genome","text":"<p>Expand the genome_metadata with more details for: the provider, assembly and gene build version, and the taxonomy.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of this module.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.MetadataError","title":"<code>MetadataError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When a metadata value is not expected.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.MissingNodeError","title":"<code>MissingNodeError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>When a taxon XML node cannot be found.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.add_assembly_version","title":"<code>add_assembly_version(genome_data)</code>","text":"<p>Adds version number to the genome's assembly if one is not present already.</p> <p>Parameters:</p> Name Type Description Default <code>genome_data</code> <code>Dict</code> <p>Genome information of assembly, accession and annotation.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.add_genebuild_metadata","title":"<code>add_genebuild_metadata(genome_data)</code>","text":"<p>Adds missing genebuild metadata.</p> <p>The default convention is to use the current date as <code>version</code> and <code>start_date</code>.</p> <p>Parameters:</p> Name Type Description Default <code>genome_data</code> <code>Dict</code> <p>Genome information of assembly, accession and annotation.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.add_provider","title":"<code>add_provider(genome_data, gff3_file=None)</code>","text":"<p>Adds provider metadata for assembly and gene models in <code>genome_data</code>.</p> <p>Assembly provider metadata will only be added if it is missing, i.e. neither <code>provider_name</code> or <code>provider_url</code> are present. The gene model metadata will only be added if <code>gff3_file</code> is provided.</p> <p>Parameters:</p> Name Type Description Default <code>genome_data</code> <code>Dict</code> <p>Genome information of assembly, accession and annotation.</p> required <code>gff3_file</code> <code>Optional[PathLike]</code> <p>Path to GFF3 file to use as annotation source for this genome.</p> <code>None</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.add_species_metadata","title":"<code>add_species_metadata(genome_data, base_api_url=DEFAULT_API_URL)</code>","text":"<p>Adds missing species metadata based on the genome's accession.</p> <p>The <code>taxonomy_id</code>, <code>strain</code> and <code>scientific_name</code> will be fetched from the taxonomy information linked to the given accession.</p> <p>Parameters:</p> Name Type Description Default <code>genome_data</code> <code>Dict</code> <p>Genome information of assembly, accession and annotation.</p> required <code>base_api_url</code> <code>str</code> <p>Base API URL to fetch the accession's taxonomy data from.</p> <code>DEFAULT_API_URL</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.get_taxonomy_from_accession","title":"<code>get_taxonomy_from_accession(accession, base_api_url=DEFAULT_API_URL)</code>","text":"<p>Returns the taxonomy metadata associated to the given accession.</p> <p>Parameters:</p> Name Type Description Default <code>accession</code> <code>str</code> <p>INSDC accession ID.</p> required <code>base_api_url</code> <code>str</code> <p>Base API URL to fetch the accession's taxonomy data from.</p> <code>DEFAULT_API_URL</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Dictionary with key-value pairs for <code>taxon_id</code> and <code>scientific_name</code>. <code>strain</code> will be added</p> <code>Dict</code> <p>only if present in the fetched taxonomy data.</p> <p>Raises:</p> Type Description <code>MissinDataException</code> <p>If <code>TAXON_ID</code> or <code>SCIENTIFIC_NAME</code> are missing in the taxonomy data fetched.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.main","title":"<code>main()</code>","text":"<p>Module's entry-point.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_genome/#src.ensembl.io.genomio.metadata.prepare_genome.prepare_genome_metadata","title":"<code>prepare_genome_metadata(input_path, output_path, gff3_file=None, base_api_url=DEFAULT_API_URL)</code>","text":"<p>TODO</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <p>Path to JSON file with genome metadata.</p> required <code>output_dir</code> <p>Output directory where to generate the final <code>genome.json</code> file.</p> required <code>gff3_file</code> <code>Optional[PathLike]</code> <p>Path to GFF3 file to use as annotation source for this genome.</p> <code>None</code> <code>base_api_url</code> <code>str</code> <p>Base API URL to fetch the accession's taxonomy data from.</p> <code>DEFAULT_API_URL</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/","title":"prepare_seq_region","text":"<p>Construct a seq_region metadata file from INSDC files.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of this module.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.InputSchema.reformat_args","title":"<code>reformat_args(data, **kwargs)</code>","text":"<p>Processes arguments to may need additional parsing after being correctly loaded.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Loaded arguments.</p> required <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.UnknownMetadata","title":"<code>UnknownMetadata</code>","text":"<p>             Bases: <code>Exception</code></p> <p>If a metadata if not supported or recognized.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.add_insdc_seq_region_name","title":"<code>add_insdc_seq_region_name(seq_regions, synonym_sources=None)</code>","text":"<p>Returns the list of sequence regions with their corresponding INSDC sequence region names.</p> <p>\"BRC4_seq_region_name\" and \"EBI_seq_region_name\" fields are added to each sequence region: the former will contain the corresponding INSDC name whilst the latter will contain the current name.</p> <p>Parameters:</p> Name Type Description Default <code>seq_regions</code> <code>List[SeqRegion]</code> <p>Sequence regions.</p> required <code>synonym_sources</code> <code>Optional[List[str]]</code> <p>Synonym sources to use for the BRC4 name, in order of preference.</p> <code>None</code> <p>Raises:</p> Type Description <code>UnknownMetadata</code> <p>If no synonym name is found for a sequence region.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.add_mitochondrial_codon_table","title":"<code>add_mitochondrial_codon_table(seq_regions, taxon_id)</code>","text":"<p>Adds the mitochondrial codon table to each sequence region (when missing) based on the taxon ID.</p> <p>If no mitochondrial genetic code can be found for the given taxon ID nothing will be changed.</p> <p>Parameters:</p> Name Type Description Default <code>seq_regions</code> <code>List[SeqRegion]</code> <p>Sequence regions.</p> required <code>taxon_id</code> <code>int</code> <p>The species taxon ID.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.add_translation_table","title":"<code>add_translation_table(seq_regions, location_codon=None)</code>","text":"<p>Adds the translation codon table to each sequence region (when missing) based on its location.</p> <p>Parameters:</p> Name Type Description Default <code>seq_regions</code> <code>List[SeqRegion]</code> <p>Sequence regions.</p> required <code>location_codon</code> <code>Optional[Dict[str, int]]</code> <p>Map of known codon tables for known locations.</p> <code>None</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.exclude_seq_regions","title":"<code>exclude_seq_regions(seq_regions, to_exclude)</code>","text":"<p>Returns the list of sequence regions with the ones from the exclusion list removed.</p> <p>Parameters:</p> Name Type Description Default <code>seq_regions</code> <code>List[SeqRegion]</code> <p>Sequence regions.</p> required <code>to_exclude</code> <code>List[str]</code> <p>Sequence region names to exclude.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.get_codon_table","title":"<code>get_codon_table(record)</code>","text":"<p>Returns the codon table number from a given a GenBank sequence record (if present).</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>SeqRecord</code> <p>GenBank sequence record.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.get_gbff_seq_regions","title":"<code>get_gbff_seq_regions(gbff_path)</code>","text":"<p>Returns the sequence regions found in the GBFF file (if any).</p> <p>Parameters:</p> Name Type Description Default <code>gbff_path</code> <code>PathLike</code> <p>Path to GBFF file.</p> required <p>Returns:</p> Type Description <code>SeqRegionDict</code> <p>A dict of SeqRegions, with their name as the key.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.get_genbank_id","title":"<code>get_genbank_id(record)</code>","text":"<p>Returns the GenBank accession from a given sequence record (if present).</p> <p>Only useful for RefSeq sequence records, where the GenBank accession is stored in a comment.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>SeqRecord</code> <p>Sequence record.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.get_organelle","title":"<code>get_organelle(record, molecule_location=None)</code>","text":"<p>Returns the organelle location from the given GenBank record (if present).</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>SeqRecord</code> <p>GenBank sequence record.</p> required <code>molecule_location</code> <code>Optional[Dict]</code> <p>Map of sequence type to SO location.</p> <code>None</code> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the location is not part of the controlled vocabulary.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.get_report_regions","title":"<code>get_report_regions(report_path, is_refseq)</code>","text":"<p>Returns the sequence regions found in the report file.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>PathLike</code> <p>Path to the sequence regions report file.</p> required <code>is_refseq</code> <code>bool</code> <p>True if the source of the report is RefSeq, false if INSDC.</p> required <p>Returns:</p> Type Description <code>SeqRegionDict</code> <p>A dict of SeqRegions, with their name as the key.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.main","title":"<code>main()</code>","text":"<p>Module's entry-point.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.make_seq_region","title":"<code>make_seq_region(data, is_refseq, synonym_map=None, molecule_location=None)</code>","text":"<p>Returns a sequence region from the information provided.</p> <p>An empty sequence region will be returned if not accession information is found.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>a dict from the report representing one line, where the key is the column name.</p> required <code>is_refseq</code> <code>bool</code> <p>True if the source is RefSeq, false if INSDC.</p> required <code>synonym_map</code> <code>Optional[Dict[str, str]]</code> <p>Map of INSDC report column names to sequence region field names.</p> <code>None</code> <code>molecule_location</code> <code>Optional[Dict[str, str]]</code> <p>Map of sequence type to SO location.</p> <code>None</code> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the sequence location is not recognised.</p> <code>UnknownMetadata</code> <p>if the sequence role is not recognised.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.merge_seq_regions","title":"<code>merge_seq_regions(left=None, right=None)</code>","text":"<p>Merges sequence regions from different sources.</p> <p>When combining two regions matching the same key, the \"right\" seq region data will take precedence over the \"left\".</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Optional[SeqRegionDict]</code> <p>Dictionary of sequence regions with names as keys.</p> <code>None</code> <code>right</code> <code>Optional[SeqRegionDict]</code> <p>Dictionary of sequence regions with names as keys.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[SeqRegion]</code> <p>A list of merged sequence regions, sorted by their name.</p>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.prepare_seq_region_metadata","title":"<code>prepare_seq_region_metadata(genome_file, report_file, gbff_file, dst_dir, brc4_mode=True, to_exclude=None)</code>","text":"<p>Prepares the sequence region metadata found in the INSDC/RefSeq report and GBFF files.</p> <p>The sequence region information is loaded from both sources and combined. Elements are added/excluded as requested, and the final sequence region metadata is dumped in a JSON file that follows the schema defined in \"schemas/seq_region_schema.json\".</p> <p>Parameters:</p> Name Type Description Default <code>genome_file</code> <code>PathLike</code> <p>Genome metadata JSON file path.</p> required <code>report_file</code> <code>PathLike</code> <p>INSDC/RefSeq sequences report file path to parse.</p> required <code>gbff_file</code> <code>Optional[PathLike]</code> <p>INSDC/RefSeq GBFF file path to parse.</p> required <code>dst_dir</code> <code>PathLike</code> <p>Output folder for the processed sequence regions JSON file.</p> required <code>brc4_mode</code> <code>bool</code> <p>Include INSDC sequence region names?</p> <code>True</code> <code>to_exclude</code> <code>Optional[List[str]]</code> <p>Sequence region names to exclude.</p> <code>None</code>"},{"location":"reference/ensembl/io/genomio/metadata/prepare_seq_region/#src.ensembl.io.genomio.metadata.prepare_seq_region.report_to_csv","title":"<code>report_to_csv(report_path)</code>","text":"<p>Returns an assembly report as a CSV string.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>PathLike</code> <p>path to a seq_region file from INSDC/RefSeq</p> required <p>Returns:</p> Type Description <code>Tuple[str, Dict]</code> <p>The data as a string in CSV format, and the head metadata as a dictionary.</p>"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/","title":"update_genome_metadata","text":"<p>Add more metadata to the genome metadata file, including added seq_regions (e.g. MT chromosome).</p>"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of this module.</p>"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.MissingDataError","title":"<code>MissingDataError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Used if some data is missing from the report file.</p>"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.amend_genomic_metadata","title":"<code>amend_genomic_metadata(genome_infile, genome_outfile, insdc_refseq_report_infile, genbank_infile, brc4_mode=1)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>genome_infile</code> <code>PathLike</code> <p>Genome data following the schemas/genome_schema.json.</p> required <code>genome_outfile</code> <code>PathLike</code> <p>Amended genome data file.</p> required <code>output_dir</code> <p>Directory where the new file will be created.</p> required <code>INSDC_RefSeq_report_infile</code> <p>Path to the INSDC/RefSeq sequences report to parse.</p> required <code>genbank_infile</code> <code>PathLike</code> <p>Path to the INSDC/RefSeq gbff file to parse.</p> required <code>brc4_mode</code> <code>Optional[int]</code> <p>Activate BRC4 mode (default).</p> <code>1</code>"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.get_additions","title":"<code>get_additions(report_path, gbff_path)</code>","text":"<p>Returns all <code>seq_regions</code> that are mentioned in the report but that are not in the data.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>Path</code> <p>Path to the report file.</p> required <code>gbff_path</code> <code>Path</code> <p>Path to the GBFF file.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.get_gbff_regions","title":"<code>get_gbff_regions(gbff_path)</code>","text":"<p>Returns the <code>seq_region</code> data from the GBFF file.</p> <p>Parameters:</p> Name Type Description Default <code>gbff_path</code> <code>Path</code> <p>Gbff file path to use.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.get_report_regions_names","title":"<code>get_report_regions_names(report_path)</code>","text":"<p>Returns a list of <code>seq_region</code> names from the report file.</p> <p>Parameters:</p> Name Type Description Default <code>report_path</code> <code>Path</code> <p>Path to the seq_regions report from INSDC/RefSeq.</p> required"},{"location":"reference/ensembl/io/genomio/metadata/update_genome_metadata/#src.ensembl.io.genomio.metadata.update_genome_metadata.main","title":"<code>main()</code>","text":"<p>Module's entry-point.</p>"},{"location":"reference/ensembl/io/genomio/schemas/","title":"schemas","text":"<p>Schemas module.</p>"},{"location":"reference/ensembl/io/genomio/schemas/json_schema_factory/","title":"json_schema_factory","text":"<p>Generates one JSON file per metadata type inside <code>manifest</code>, including \"manifest.json\" itself.</p> <p>Each JSON file will have the file name of the metadata type, e.g. \"seq_region.json\".</p> <p>Parameters:</p> Name Type Description Default <code>manifest_dir</code> <code>PathLike</code> <p>Path to the folder with the manifest JSON file to check.</p> required <code>metadata_types</code> <code>List[str]</code> <p>Metadata types to extract from <code>manifest</code> as JSON files.</p> required <code>output_dir</code> <code>PathLike</code> <p>Path to the folder where to generate the JSON files.</p> required"},{"location":"reference/ensembl/io/genomio/schemas/json_schema_validator/","title":"json_schema_validator","text":"<p>Validates a JSON file with the provided JSON schema.</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>PathLike</code> <p>Path to the JSON file to check.</p> required <code>json_schema</code> <code>PathLike</code> <p>JSON schema to validate <code>json_file</code> against.</p> required Example <p>check_json_schema --json_file  --json_schema"},{"location":"reference/ensembl/io/genomio/utils/","title":"utils","text":"<p>GenomIO utils modules.</p>"},{"location":"reference/ensembl/io/genomio/utils/archive_utils/","title":"archive_utils","text":"<p>Utils to deal with archive files.</p>"},{"location":"reference/ensembl/io/genomio/utils/archive_utils/#src.ensembl.io.genomio.utils.archive_utils.InputSchema","title":"<code>InputSchema</code>","text":"<p>             Bases: <code>ArgSchema</code></p> <p>Input arguments expected by the entry point of <code>extract_file_cli</code>.</p>"},{"location":"reference/ensembl/io/genomio/utils/archive_utils/#src.ensembl.io.genomio.utils.archive_utils.extract_file","title":"<code>extract_file(src_file, dst_dir)</code>","text":"<p>Extracts the <code>src_file</code> into <code>dst_dir</code>.</p> <p>If the file is not an archive, it will be copied to <code>dst_dir</code>. <code>dst_dir</code> will be created if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>src_file</code> <code>PathLike</code> <p>Path to the file to unpack.</p> required <code>dst_dir</code> <code>PathLike</code> <p>Path to where extract the file.</p> required"},{"location":"reference/ensembl/io/genomio/utils/archive_utils/#src.ensembl.io.genomio.utils.archive_utils.extract_file_cli","title":"<code>extract_file_cli()</code>","text":"<p>Entry-point for the <code>extract_file</code> method.</p>"},{"location":"reference/ensembl/io/genomio/utils/archive_utils/#src.ensembl.io.genomio.utils.archive_utils.open_gz_file","title":"<code>open_gz_file(file_path)</code>","text":"<p>Yields an open file object, even if the file is compressed with gzip.</p> <p>The file is expected to contain a text, and this can be used with the usual \"with\".</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>PathLike</code> <p>A file path to open.</p> required"},{"location":"reference/ensembl/io/genomio/utils/json_utils/","title":"json_utils","text":"<p>Utils to deal with JSON files.</p>"},{"location":"reference/ensembl/io/genomio/utils/json_utils/#src.ensembl.io.genomio.utils.json_utils.get_json","title":"<code>get_json(src_path)</code>","text":"<p>Generic data JSON loader.</p> <p>Parameters:</p> Name Type Description Default <code>src_path</code> <code>PathLike</code> <p>Path to the JSON file to load.</p> required"},{"location":"reference/ensembl/io/genomio/utils/json_utils/#src.ensembl.io.genomio.utils.json_utils.print_json","title":"<code>print_json(dst_path, data)</code>","text":"<p>Generic data JSON dumper to a file.</p> <p>Parameters:</p> Name Type Description Default <code>dst_path</code> <code>PathLike</code> <p>Path to the JSON to create.</p> required <code>data</code> <code>Any</code> <p>Any data to store into the file.</p> required"},{"location":"reference/example/","title":"Index","text":""},{"location":"reference/example/calculate/calculations/","title":"calculations","text":"<p>Provide several sample math calculations.</p> <p>This module allows the user to make mathematical calculations.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from calculator import calculations\n&gt;&gt;&gt; calculations.add(2, 4)\n6.0\n&gt;&gt;&gt; calculations.multiply(2.0, 4.0)\n8.0\n&gt;&gt;&gt; from calculator.calculations import divide\n&gt;&gt;&gt; divide(4.0, 2)\n2.0\n</code></pre> <p>The module contains the following functions:</p> <ul> <li><code>add(a, b)</code> - Returns the sum of two numbers.</li> <li><code>subtract(a, b)</code> - Returns the difference of two numbers.</li> <li><code>multiply(a, b)</code> - Returns the product of two numbers.</li> <li><code>divide(a, b)</code> - Returns the quotient of two numbers.</li> </ul>"},{"location":"reference/example/calculate/calculations/#src.example.calculate.calculations.add","title":"<code>add(a, b)</code>","text":"<p>Compute and return the sum of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the first addend in the addition.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the second addend in the addition.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p>"},{"location":"reference/example/calculate/calculations/#src.example.calculate.calculations.divide","title":"<code>divide(a, b)</code>","text":"<p>Compute and return the quotient of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; divide(4.0, 2.0)\n2.0\n&gt;&gt;&gt; divide(4, 2)\n2.0\n&gt;&gt;&gt; divide(4, 0)\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the dividend in the division.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the divisor in the division.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the quotient of <code>a</code> and <code>b</code>.</p> <p>Raises:</p> Type Description <code>ZeroDivisionError</code> <p>An error occurs when the divisor is <code>0</code>.</p>"},{"location":"reference/example/calculate/calculations/#src.example.calculate.calculations.multiply","title":"<code>multiply(a, b)</code>","text":"<p>Compute and return the product of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; multiply(4.0, 2.0)\n8.0\n&gt;&gt;&gt; multiply(4, 2)\n8.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the multiplicand in the multiplication.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the multiplier in the multiplication.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the product of <code>a</code> and <code>b</code>.</p>"},{"location":"reference/example/calculate/calculations/#src.example.calculate.calculations.subtract","title":"<code>subtract(a, b)</code>","text":"<p>Calculate the difference of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subtract(4.0, 2.0)\n2.0\n&gt;&gt;&gt; subtract(4, 2)\n2.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the minuend in the subtraction.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the subtrahend in the subtraction.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the difference between <code>a</code> and <code>b</code>.</p>"},{"location":"reference/example/google_docs/google_docs_eg/","title":"google_docs","text":"<p>Example Google style docstrings.</p> <p>This module demonstrates documentation as specified by the <code>Google Python Style Guide</code>_. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text.</p> Example <p>Examples can be given using either the <code>Example</code> or <code>Examples</code> sections. Sections support any reStructuredText formatting, including literal blocks::</p> <pre><code>$ python example_google.py\n</code></pre> <p>Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts.</p> <p>Attributes:</p> Name Type Description <code>module_level_variable1</code> <code>int</code> <p>Module level variables may be documented in either the <code>Attributes</code> section of the module docstring, or in an inline docstring immediately following the variable.</p> <p>Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it.</p> Todo <ul> <li>For module TODOs</li> <li>You have to also use <code>sphinx.ext.todo</code> extension</li> </ul> <p>.. _Google Python Style Guide:    http://google.github.io/styleguide/pyguide.html</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.module_level_variable2","title":"<code>module_level_variable2 = 98765</code>  <code>module-attribute</code>","text":"<p>int: Module level variable documented inline.</p> <p>The docstring may span multiple lines. The type may optionally be specified on the first line, separated by a colon.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass","title":"<code>ExampleClass</code>","text":"<p>             Bases: <code>object</code></p> <p>The summary line for a class docstring should fit on one line.</p> <p>If the class has public attributes, they may be documented here in an <code>Attributes</code> section and follow the same formatting as a function's <code>Args</code> section. Alternatively, attributes may be documented inline with the attribute's declaration (see init method below).</p> <p>Properties created with the <code>@property</code> decorator should be documented in the property's getter method.</p> <p>Attributes:</p> Name Type Description <code>attr1</code> <code>str</code> <p>Description of <code>attr1</code>.</p> <code>attr2</code> <p>obj:<code>int</code>, optional): Description of <code>attr2</code>.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.attr5","title":"<code>attr5 = None</code>  <code>instance-attribute</code>","text":"<p>str: Docstring after attribute, with type specified.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.readonly_property","title":"<code>readonly_property</code>  <code>property</code>","text":"<p>str: Properties should be documented in their getter method.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.readwrite_property","title":"<code>readwrite_property</code>  <code>property</code> <code>writable</code>","text":"<p>:obj:<code>list</code> of :obj:<code>str</code>: Properties with both a getter and setter should only be documented in their getter method.</p> <p>If the setter method contains notable behavior, it should be mentioned here.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.__init__","title":"<code>__init__(param1, param2, param3)</code>","text":"<p>Example of docstring on the init method.</p> <p>The init method may be documented in either the class level docstring, or as a docstring on the init method itself.</p> <p>Either form is acceptable, but the two should not be mixed. Choose one convention to document the init method and be consistent with it.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>str</code> <p>Description of <code>param1</code>.</p> required <code>param2</code> <p>obj:<code>int</code>, optional): Description of <code>param2</code>. Multiple lines are supported.</p> required <code>param3</code> <p>obj:<code>list</code> of :obj:<code>str</code>): Description of <code>param3</code>.</p> required"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.__special__","title":"<code>__special__()</code>","text":"<p>By default special members with docstrings are not included.</p> <p>Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if <code>napoleon_include_special_with_doc</code> is set to True.</p> <p>This behavior can be enabled by changing the following setting in Sphinx's conf.py::</p> <pre><code>napoleon_include_special_with_doc = True\n</code></pre>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleClass.example_method","title":"<code>example_method(param1, param2)</code>","text":"<p>Class methods are similar to regular functions.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <p>The first parameter.</p> required <code>param2</code> <p>The second parameter.</p> required <p>Returns:</p> Type Description <p>True if successful, False otherwise.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.ExampleError","title":"<code>ExampleError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Exceptions are documented in the same way as classes.</p> <p>The init method may be documented in either the class level docstring, or as a docstring on the init method itself.</p> <p>Either form is acceptable, but the two should not be mixed. Choose one convention to document the init method and be consistent with it.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Human readable string describing the exception.</p> required <code>code</code> <p>obj:<code>int</code>, optional): Error code.</p> required <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>Human readable string describing the exception.</p> <code>code</code> <code>int</code> <p>Exception error code.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.example_generator","title":"<code>example_generator(n)</code>","text":"<p>Generators have a <code>Yields</code> section instead of a <code>Returns</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The upper limit of the range to generate, from 0 to <code>n</code> - 1.</p> required <p>Yields:</p> Name Type Description <code>int</code> <p>The next number in the range of 0 to <code>n</code> - 1.</p> <p>Examples:</p> <p>Examples should be written in doctest format, and should illustrate how to use the function.</p> <pre><code>&gt;&gt;&gt; print([i for i in example_generator(4)])\n[0, 1, 2, 3]\n</code></pre>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.function_with_pep484_type_annotations","title":"<code>function_with_pep484_type_annotations(param1, param2)</code>","text":"<p>Example function with PEP 484 type annotations.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>The first parameter.</p> required <code>param2</code> <code>str</code> <p>The second parameter.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The return value. True for success, False otherwise.</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.function_with_types_in_docstring","title":"<code>function_with_types_in_docstring(param1, param2)</code>","text":"<p>Example function with types documented in the docstring.</p> <p><code>PEP 484</code> type annotations are supported. If attribute, parameter, and return types are annotated according to <code>PEP 484</code>, they do not need to be included in the docstring:</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>The first parameter.</p> required <code>param2</code> <code>str</code> <p>The second parameter.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The return value. True for success, False otherwise.</p> <p>.. _PEP 484:     https://www.python.org/dev/peps/pep-0484/</p>"},{"location":"reference/example/google_docs/google_docs_eg/#src.example.google_docs.google_docs_eg.module_level_function","title":"<code>module_level_function(param1, param2=None, *args, **kwargs)</code>","text":"<p>This is an example of a module level function.</p> <p>Function parameters should be documented in the <code>Args</code> section. The name of each parameter is required. The type and description of each parameter is optional, but should be included if not obvious.</p> <p>If *args or **kwargs are accepted, they should be listed as <code>*args</code> and <code>**kwargs</code>.</p> <p>The format for a parameter is::</p> <pre><code>name (type): description\n    The description may span multiple lines. Following\n    lines should be indented. The \"(type)\" is optional.\n\n    Multiple paragraphs are supported in parameter\n    descriptions.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>The first parameter.</p> required <code>param2</code> <p>obj:<code>str</code>, optional): The second parameter. Defaults to None. Second line of description should be indented.</p> <code>None</code> <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, False otherwise.</p> <p>The return type is optional and may be specified at the beginning of</p> <p>the <code>Returns</code> section followed by a colon.</p> <p>The <code>Returns</code> section may span multiple lines and paragraphs.</p> <p>Following lines should be indented to match the first line.</p> <p>The <code>Returns</code> section supports any reStructuredText formatting,</p> <p>including literal blocks::</p> <p>{     'param1': param1,     'param2': param2 }</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>The <code>Raises</code> section is a list of all exceptions that are relevant to the interface.</p> <code>ValueError</code> <p>If <code>param2</code> is equal to <code>param1</code>.</p>"}]}